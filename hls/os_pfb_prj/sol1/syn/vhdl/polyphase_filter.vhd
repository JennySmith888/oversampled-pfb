-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity polyphase_filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    filter_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    filter_out_full_n : IN STD_LOGIC;
    filter_out_write : OUT STD_LOGIC;
    ifft_config_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    ifft_config_data_V_full_n : IN STD_LOGIC;
    ifft_config_data_V_write : OUT STD_LOGIC );
end;


architecture behav of polyphase_filter is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv8_18 : STD_LOGIC_VECTOR (7 downto 0) := "00011000";
    constant ap_const_lv8_E8 : STD_LOGIC_VECTOR (7 downto 0) := "11101000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal in_r_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal in_r_0_vld_in : STD_LOGIC;
    signal in_r_0_vld_out : STD_LOGIC;
    signal in_r_0_ack_in : STD_LOGIC;
    signal in_r_0_ack_out : STD_LOGIC;
    signal in_r_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal in_r_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal in_r_0_sel_rd : STD_LOGIC := '0';
    signal in_r_0_sel_wr : STD_LOGIC := '0';
    signal in_r_0_sel : STD_LOGIC;
    signal in_r_0_load_A : STD_LOGIC;
    signal in_r_0_load_B : STD_LOGIC;
    signal in_r_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_r_0_state_cmp_full : STD_LOGIC;
    signal filter_state_M_real_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal filter_state_M_real_ce0 : STD_LOGIC;
    signal filter_state_M_real_we0 : STD_LOGIC;
    signal filter_state_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal filter_state_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal filter_state_M_imag_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal filter_state_M_imag_ce0 : STD_LOGIC;
    signal filter_state_M_imag_we0 : STD_LOGIC;
    signal filter_state_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal filter_state_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_ce0 : STD_LOGIC;
    signal h_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_idx : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal shift_states_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal shift_states_ce0 : STD_LOGIC;
    signal shift_states_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_5_fu_452_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal filter_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ifft_config_data_V_blk_n : STD_LOGIC;
    signal tmp_9_fu_397_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_3_fu_427_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_647 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_415_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_idx_load_reg_652 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_cast_fu_448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_cast_reg_663 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op66_read_state4 : BOOLEAN;
    signal ap_block_state4 : BOOLEAN;
    signal tmp_6_reg_671 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_reg_675 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_M_real_load4_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_M_imag_load8_fu_508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_fu_513_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal temp_M_real_addr_2_reg_717 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_M_imag_addr_2_reg_722 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_1_fu_524_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_1_reg_732 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_load_reg_737 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_375_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_743 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_i_reg_748 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_386_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_i_reg_753 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_391_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_i_reg_758 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_real_writ_reg_763 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_imag_writ_reg_768 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal temp_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_783 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_1_fu_536_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_791 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal exitcond_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_M_real_ce0 : STD_LOGIC;
    signal temp_M_real_we0 : STD_LOGIC;
    signal temp_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_M_imag_ce0 : STD_LOGIC;
    signal temp_M_imag_we0 : STD_LOGIC;
    signal temp_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_297 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_1_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_reg_308 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_reg_320 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal p_r_M_imag_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_352 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_605_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_363_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_367_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_367_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_2_fu_423_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_439_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_cast1_fu_444_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal idx_fu_460_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_477_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_489_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_M_imag_load_new6_fu_498_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_542_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmpidx_fu_546_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_557_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_17_fu_570_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_18_fu_582_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_19_fu_585_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_and_t_fu_591_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_fu_562_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_599_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_and_f_fu_574_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_M_imag_load_to_fu_623_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_M_real_load_to_fu_619_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_363_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component os_pfb_faddfsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component os_pfb_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component os_pfb_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component polyphase_filter_filter_state_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component polyphase_filter_h IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component polyphase_filter_shift_states IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component polyphase_filter_temp_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    filter_state_M_real_U : component polyphase_filter_filter_state_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => filter_state_M_real_address0,
        ce0 => filter_state_M_real_ce0,
        we0 => filter_state_M_real_we0,
        d0 => filter_state_M_real_d0,
        q0 => filter_state_M_real_q0);

    filter_state_M_imag_U : component polyphase_filter_filter_state_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => filter_state_M_imag_address0,
        ce0 => filter_state_M_imag_ce0,
        we0 => filter_state_M_imag_we0,
        d0 => filter_state_M_imag_d0,
        q0 => filter_state_M_imag_q0);

    h_U : component polyphase_filter_h
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => h_address0,
        ce0 => h_ce0,
        q0 => h_q0);

    shift_states_U : component polyphase_filter_shift_states
    generic map (
        DataWidth => 5,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_states_address0,
        ce0 => shift_states_ce0,
        q0 => shift_states_q0);

    temp_M_real_U : component polyphase_filter_temp_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_M_real_address0,
        ce0 => temp_M_real_ce0,
        we0 => temp_M_real_we0,
        d0 => temp_M_real_d0,
        q0 => temp_M_real_q0);

    temp_M_imag_U : component polyphase_filter_temp_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_M_imag_address0,
        ce0 => temp_M_imag_ce0,
        we0 => temp_M_imag_we0,
        d0 => temp_M_imag_d0,
        q0 => temp_M_imag_q0);

    os_pfb_faddfsub_32ns_32ns_32_4_full_dsp_1_U1 : component os_pfb_faddfsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_363_p0,
        din1 => grp_fu_363_p1,
        opcode => grp_fu_363_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_363_p2);

    os_pfb_fadd_32ns_32ns_32_4_full_dsp_1_U2 : component os_pfb_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_367_p0,
        din1 => grp_fu_367_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_367_p2);

    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U3 : component os_pfb_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_reg_342,
        din1 => h_load_reg_737,
        ce => ap_const_logic_1,
        dout => grp_fu_375_p2);

    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U4 : component os_pfb_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_reg_332,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_380_p2);

    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U5 : component os_pfb_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_reg_332,
        din1 => h_load_reg_737,
        ce => ap_const_logic_1,
        dout => grp_fu_386_p2);

    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U6 : component os_pfb_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_reg_342,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_391_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond_fu_530_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    in_r_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_r_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_r_0_ack_out = ap_const_logic_1) and (in_r_0_vld_out = ap_const_logic_1))) then 
                                        in_r_0_sel_rd <= not(in_r_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_r_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_r_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_r_0_ack_in = ap_const_logic_1) and (in_r_0_vld_in = ap_const_logic_1))) then 
                                        in_r_0_sel_wr <= not(in_r_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_r_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_r_0_state <= ap_const_lv2_0;
            else
                if ((((in_r_0_state = ap_const_lv2_2) and (in_r_0_vld_in = ap_const_logic_0)) or ((in_r_0_state = ap_const_lv2_3) and (in_r_0_vld_in = ap_const_logic_0) and (in_r_0_ack_out = ap_const_logic_1)))) then 
                    in_r_0_state <= ap_const_lv2_2;
                elsif ((((in_r_0_state = ap_const_lv2_1) and (in_r_0_ack_out = ap_const_logic_0)) or ((in_r_0_state = ap_const_lv2_3) and (in_r_0_ack_out = ap_const_logic_0) and (in_r_0_vld_in = ap_const_logic_1)))) then 
                    in_r_0_state <= ap_const_lv2_1;
                elsif (((not(((in_r_0_vld_in = ap_const_logic_0) and (in_r_0_ack_out = ap_const_logic_1))) and not(((in_r_0_ack_out = ap_const_logic_0) and (in_r_0_vld_in = ap_const_logic_1))) and (in_r_0_state = ap_const_lv2_3)) or ((in_r_0_state = ap_const_lv2_1) and (in_r_0_ack_out = ap_const_logic_1)) or ((in_r_0_state = ap_const_lv2_2) and (in_r_0_vld_in = ap_const_logic_1)))) then 
                    in_r_0_state <= ap_const_lv2_3;
                else 
                    in_r_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (filter_out_full_n = ap_const_logic_1))) then 
                i_reg_352 <= i_1_reg_791;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_reg_352 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    m_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                m_reg_320 <= m_1_reg_732;
            elsif (((tmp_fu_415_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                m_reg_320 <= ap_const_lv6_1F;
            end if; 
        end if;
    end process;

    p_r_M_imag_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op66_read_state4 = ap_const_boolean_1) and (in_r_0_vld_out = ap_const_logic_0))) and (tmp_6_fu_465_p2 = ap_const_lv1_1) and (tmp_5_fu_452_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_r_M_imag_reg_332 <= in_M_imag_load8_fu_508_p1;
            elsif (((tmp_6_reg_671 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_r_M_imag_reg_332 <= filter_state_M_imag_q0;
            end if; 
        end if;
    end process;

    p_r_M_real_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op66_read_state4 = ap_const_boolean_1) and (in_r_0_vld_out = ap_const_logic_0))) and (tmp_6_fu_465_p2 = ap_const_lv1_1) and (tmp_5_fu_452_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_r_M_real_reg_342 <= in_M_real_load4_fu_493_p1;
            elsif (((tmp_6_reg_671 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_r_M_real_reg_342 <= filter_state_M_real_q0;
            end if; 
        end if;
    end process;

    p_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_409_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_reg_308 <= ap_const_lv4_7;
            elsif ((not(((ap_predicate_op66_read_state4 = ap_const_boolean_1) and (in_r_0_vld_out = ap_const_logic_0))) and (tmp_5_fu_452_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_reg_308 <= p_1_fu_513_p2;
            end if; 
        end if;
    end process;

    tmp_8_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_409_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                tmp_8_reg_297 <= tmp_9_fu_397_p2;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (ifft_config_data_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_8_reg_297 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                complex_M_imag_writ_reg_768 <= grp_fu_367_p2;
                complex_M_real_writ_reg_763 <= grp_fu_363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                h_load_reg_737 <= h_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                i_1_reg_791 <= i_1_fu_536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_r_0_load_A = ap_const_logic_1)) then
                in_r_0_payload_A <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_r_0_load_B = ap_const_logic_1)) then
                in_r_0_payload_B <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_1_reg_732 <= m_1_fu_524_p2;
                temp_M_imag_addr_2_reg_722 <= tmp_15_fu_519_p1(5 - 1 downto 0);
                temp_M_real_addr_2_reg_717 <= tmp_15_fu_519_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op66_read_state4 = ap_const_boolean_1) and (in_r_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                m_cast_reg_663 <= m_cast_fu_448_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                shift_reg_783 <= shift_states_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_530_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                state_idx <= tmp_11_fu_605_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_415_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                state_idx_load_reg_652 <= state_idx;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_2_i_i_reg_748 <= grp_fu_380_p2;
                tmp_4_i_i_reg_753 <= grp_fu_386_p2;
                tmp_5_i_i_reg_758 <= grp_fu_391_p2;
                tmp_i_i_reg_743 <= grp_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_415_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_3_reg_647(7 downto 5) <= tmp_3_fu_427_p3(7 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op66_read_state4 = ap_const_boolean_1) and (in_r_0_vld_out = ap_const_logic_0))) and (tmp_5_fu_452_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_6_reg_671 <= tmp_6_fu_465_p2;
                    tmp_7_reg_675(7 downto 0) <= tmp_7_fu_471_p1(7 downto 0);
            end if;
        end if;
    end process;
    tmp_3_reg_647(4 downto 0) <= "00000";
    tmp_7_reg_675(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_r_0_vld_out, filter_out_full_n, ifft_config_data_V_full_n, ap_CS_fsm_state4, tmp_5_fu_452_p3, ap_CS_fsm_state19, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_fu_415_p3, ap_predicate_op66_read_state4, ap_CS_fsm_state18, exitcond_fu_530_p2, tmp_1_fu_409_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (ifft_config_data_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_1_fu_409_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_fu_415_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((ap_predicate_op66_read_state4 = ap_const_boolean_1) and (in_r_0_vld_out = ap_const_logic_0))) and (tmp_5_fu_452_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((ap_predicate_op66_read_state4 = ap_const_boolean_1) and (in_r_0_vld_out = ap_const_logic_0))) and (tmp_5_fu_452_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((exitcond_fu_530_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (filter_out_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, ifft_config_data_V_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (ifft_config_data_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(in_r_0_vld_out, ap_predicate_op66_read_state4)
    begin
                ap_block_state4 <= ((ap_predicate_op66_read_state4 = ap_const_boolean_1) and (in_r_0_vld_out = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state18, exitcond_fu_530_p2)
    begin
        if (((exitcond_fu_530_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op66_read_state4_assign_proc : process(tmp_5_fu_452_p3, tmp_6_fu_465_p2)
    begin
                ap_predicate_op66_read_state4 <= ((tmp_6_fu_465_p2 = ap_const_lv1_1) and (tmp_5_fu_452_p3 = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;
    exitcond_fu_530_p2 <= "1" when (i_reg_352 = ap_const_lv6_20) else "0";

    filter_out_blk_n_assign_proc : process(filter_out_full_n, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            filter_out_blk_n <= filter_out_full_n;
        else 
            filter_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    filter_out_din <= (temp_M_imag_load_to_fu_623_p1 & temp_M_real_load_to_fu_619_p1);

    filter_out_write_assign_proc : process(filter_out_full_n, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (filter_out_full_n = ap_const_logic_1))) then 
            filter_out_write <= ap_const_logic_1;
        else 
            filter_out_write <= ap_const_logic_0;
        end if; 
    end process;


    filter_state_M_imag_address0_assign_proc : process(ap_CS_fsm_state4, tmp_5_fu_452_p3, tmp_6_fu_465_p2, tmp_7_fu_471_p1, tmp_7_reg_675, ap_CS_fsm_state5, tmp_14_fu_483_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            filter_state_M_imag_address0 <= tmp_7_reg_675(8 - 1 downto 0);
        elsif (((tmp_6_fu_465_p2 = ap_const_lv1_1) and (tmp_5_fu_452_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            filter_state_M_imag_address0 <= tmp_7_fu_471_p1(8 - 1 downto 0);
        elsif (((tmp_6_fu_465_p2 = ap_const_lv1_0) and (tmp_5_fu_452_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            filter_state_M_imag_address0 <= tmp_14_fu_483_p1(8 - 1 downto 0);
        else 
            filter_state_M_imag_address0 <= "XXXXXXXX";
        end if; 
    end process;


    filter_state_M_imag_ce0_assign_proc : process(in_r_0_vld_out, ap_CS_fsm_state4, tmp_5_fu_452_p3, tmp_6_fu_465_p2, ap_predicate_op66_read_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (not(((ap_predicate_op66_read_state4 = ap_const_boolean_1) and (in_r_0_vld_out = ap_const_logic_0))) and (tmp_6_fu_465_p2 = ap_const_lv1_0) and (tmp_5_fu_452_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((ap_predicate_op66_read_state4 = ap_const_boolean_1) and (in_r_0_vld_out = ap_const_logic_0))) and (tmp_6_fu_465_p2 = ap_const_lv1_1) and (tmp_5_fu_452_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            filter_state_M_imag_ce0 <= ap_const_logic_1;
        else 
            filter_state_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filter_state_M_imag_d0_assign_proc : process(filter_state_M_imag_q0, ap_CS_fsm_state4, tmp_5_fu_452_p3, tmp_6_fu_465_p2, in_M_imag_load8_fu_508_p1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            filter_state_M_imag_d0 <= filter_state_M_imag_q0;
        elsif (((tmp_6_fu_465_p2 = ap_const_lv1_1) and (tmp_5_fu_452_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            filter_state_M_imag_d0 <= in_M_imag_load8_fu_508_p1;
        else 
            filter_state_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    filter_state_M_imag_we0_assign_proc : process(in_r_0_vld_out, ap_CS_fsm_state4, tmp_5_fu_452_p3, tmp_6_fu_465_p2, ap_predicate_op66_read_state4, tmp_6_reg_671, ap_CS_fsm_state5)
    begin
        if ((((tmp_6_reg_671 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((ap_predicate_op66_read_state4 = ap_const_boolean_1) and (in_r_0_vld_out = ap_const_logic_0))) and (tmp_6_fu_465_p2 = ap_const_lv1_1) and (tmp_5_fu_452_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            filter_state_M_imag_we0 <= ap_const_logic_1;
        else 
            filter_state_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    filter_state_M_real_address0_assign_proc : process(ap_CS_fsm_state4, tmp_5_fu_452_p3, tmp_6_fu_465_p2, tmp_7_fu_471_p1, tmp_7_reg_675, ap_CS_fsm_state5, tmp_14_fu_483_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            filter_state_M_real_address0 <= tmp_7_reg_675(8 - 1 downto 0);
        elsif (((tmp_6_fu_465_p2 = ap_const_lv1_1) and (tmp_5_fu_452_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            filter_state_M_real_address0 <= tmp_7_fu_471_p1(8 - 1 downto 0);
        elsif (((tmp_6_fu_465_p2 = ap_const_lv1_0) and (tmp_5_fu_452_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            filter_state_M_real_address0 <= tmp_14_fu_483_p1(8 - 1 downto 0);
        else 
            filter_state_M_real_address0 <= "XXXXXXXX";
        end if; 
    end process;


    filter_state_M_real_ce0_assign_proc : process(in_r_0_vld_out, ap_CS_fsm_state4, tmp_5_fu_452_p3, tmp_6_fu_465_p2, ap_predicate_op66_read_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (not(((ap_predicate_op66_read_state4 = ap_const_boolean_1) and (in_r_0_vld_out = ap_const_logic_0))) and (tmp_6_fu_465_p2 = ap_const_lv1_0) and (tmp_5_fu_452_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((ap_predicate_op66_read_state4 = ap_const_boolean_1) and (in_r_0_vld_out = ap_const_logic_0))) and (tmp_6_fu_465_p2 = ap_const_lv1_1) and (tmp_5_fu_452_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            filter_state_M_real_ce0 <= ap_const_logic_1;
        else 
            filter_state_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filter_state_M_real_d0_assign_proc : process(filter_state_M_real_q0, ap_CS_fsm_state4, tmp_5_fu_452_p3, tmp_6_fu_465_p2, in_M_real_load4_fu_493_p1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            filter_state_M_real_d0 <= filter_state_M_real_q0;
        elsif (((tmp_6_fu_465_p2 = ap_const_lv1_1) and (tmp_5_fu_452_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            filter_state_M_real_d0 <= in_M_real_load4_fu_493_p1;
        else 
            filter_state_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    filter_state_M_real_we0_assign_proc : process(in_r_0_vld_out, ap_CS_fsm_state4, tmp_5_fu_452_p3, tmp_6_fu_465_p2, ap_predicate_op66_read_state4, tmp_6_reg_671, ap_CS_fsm_state5)
    begin
        if ((((tmp_6_reg_671 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((ap_predicate_op66_read_state4 = ap_const_boolean_1) and (in_r_0_vld_out = ap_const_logic_0))) and (tmp_6_fu_465_p2 = ap_const_lv1_1) and (tmp_5_fu_452_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            filter_state_M_real_we0 <= ap_const_logic_1;
        else 
            filter_state_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_363_opcode_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_363_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_363_opcode <= ap_const_lv2_0;
        else 
            grp_fu_363_opcode <= "XX";
        end if; 
    end process;


    grp_fu_363_p0_assign_proc : process(tmp_i_i_reg_743, temp_M_real_q0, ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_363_p0 <= temp_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_363_p0 <= tmp_i_i_reg_743;
        else 
            grp_fu_363_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_363_p1_assign_proc : process(tmp_2_i_i_reg_748, complex_M_real_writ_reg_763, ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_363_p1 <= complex_M_real_writ_reg_763;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_363_p1 <= tmp_2_i_i_reg_748;
        else 
            grp_fu_363_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_367_p0_assign_proc : process(tmp_4_i_i_reg_753, ap_CS_fsm_state13, temp_M_imag_q0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_367_p0 <= temp_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_367_p0 <= tmp_4_i_i_reg_753;
        else 
            grp_fu_367_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_367_p1_assign_proc : process(tmp_5_i_i_reg_758, complex_M_imag_writ_reg_768, ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_367_p1 <= complex_M_imag_writ_reg_768;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_367_p1 <= tmp_5_i_i_reg_758;
        else 
            grp_fu_367_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_address0 <= tmp_7_reg_675(8 - 1 downto 0);

    h_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            h_ce0 <= ap_const_logic_1;
        else 
            h_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_536_p2 <= std_logic_vector(unsigned(i_reg_352) + unsigned(ap_const_lv6_1));
    idx_fu_460_p2 <= std_logic_vector(unsigned(tmp_3_reg_647) + unsigned(m_cast1_fu_444_p1));

    ifft_config_data_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ifft_config_data_V_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ifft_config_data_V_blk_n <= ifft_config_data_V_full_n;
        else 
            ifft_config_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ifft_config_data_V_din <= ap_const_lv8_0;

    ifft_config_data_V_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ifft_config_data_V_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (ifft_config_data_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ifft_config_data_V_write <= ap_const_logic_1;
        else 
            ifft_config_data_V_write <= ap_const_logic_0;
        end if; 
    end process;

    in_M_imag_load8_fu_508_p1 <= in_M_imag_load_new6_fu_498_p4;
    in_M_imag_load_new6_fu_498_p4 <= in_r_0_data_out(63 downto 32);
    in_M_real_load4_fu_493_p1 <= tmp_21_fu_489_p1;
    in_r_0_ack_in <= in_r_0_state(1);

    in_r_0_ack_out_assign_proc : process(in_r_0_vld_out, ap_CS_fsm_state4, ap_predicate_op66_read_state4)
    begin
        if ((not(((ap_predicate_op66_read_state4 = ap_const_boolean_1) and (in_r_0_vld_out = ap_const_logic_0))) and (ap_predicate_op66_read_state4 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in_r_0_ack_out <= ap_const_logic_1;
        else 
            in_r_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_r_0_data_out_assign_proc : process(in_r_0_payload_A, in_r_0_payload_B, in_r_0_sel)
    begin
        if ((in_r_0_sel = ap_const_logic_1)) then 
            in_r_0_data_out <= in_r_0_payload_B;
        else 
            in_r_0_data_out <= in_r_0_payload_A;
        end if; 
    end process;

    in_r_0_load_A <= (in_r_0_state_cmp_full and not(in_r_0_sel_wr));
    in_r_0_load_B <= (in_r_0_state_cmp_full and in_r_0_sel_wr);
    in_r_0_sel <= in_r_0_sel_rd;
    in_r_0_state_cmp_full <= '0' when (in_r_0_state = ap_const_lv2_1) else '1';
    in_r_0_vld_in <= in_r_TVALID;
    in_r_0_vld_out <= in_r_0_state(0);

    in_r_TDATA_blk_n_assign_proc : process(in_r_0_state, ap_CS_fsm_state4, tmp_5_fu_452_p3, tmp_6_fu_465_p2)
    begin
        if (((tmp_6_fu_465_p2 = ap_const_lv1_1) and (tmp_5_fu_452_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in_r_TDATA_blk_n <= in_r_0_state(0);
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_r_TREADY <= in_r_0_state(1);

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state18, exitcond_fu_530_p2)
    begin
        if (((exitcond_fu_530_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    m_1_fu_524_p2 <= std_logic_vector(signed(m_reg_320) + signed(ap_const_lv6_3F));
        m_cast1_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m_reg_320),8));

        m_cast_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m_reg_320),32));

    p_1_fu_513_p2 <= std_logic_vector(unsigned(p_reg_308) + unsigned(ap_const_lv4_F));
    p_and_f_fu_574_p3 <= (ap_const_lv2_0 & tmp_17_fu_570_p1);
    p_and_t_fu_591_p3 <= (ap_const_lv2_0 & tmp_19_fu_585_p2);
    p_neg_t_fu_599_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(p_and_t_fu_591_p3));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    shift_states_address0 <= tmp_4_fu_439_p1(2 - 1 downto 0);

    shift_states_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shift_states_ce0 <= ap_const_logic_1;
        else 
            shift_states_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    temp_M_imag_address0_assign_proc : process(ap_CS_fsm_state2, temp_M_imag_addr_2_reg_722, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state16, tmp_s_fu_403_p1, tmp_12_fu_551_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            temp_M_imag_address0 <= tmp_12_fu_551_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            temp_M_imag_address0 <= temp_M_imag_addr_2_reg_722;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp_M_imag_address0 <= tmp_s_fu_403_p1(5 - 1 downto 0);
        else 
            temp_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    temp_M_imag_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            temp_M_imag_ce0 <= ap_const_logic_1;
        else 
            temp_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_M_imag_d0_assign_proc : process(ap_CS_fsm_state2, grp_fu_367_p2, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            temp_M_imag_d0 <= grp_fu_367_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp_M_imag_d0 <= ap_const_lv32_0;
        else 
            temp_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    temp_M_imag_load_to_fu_623_p1 <= temp_M_imag_q0;

    temp_M_imag_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            temp_M_imag_we0 <= ap_const_logic_1;
        else 
            temp_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_M_real_address0_assign_proc : process(ap_CS_fsm_state2, temp_M_real_addr_2_reg_717, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state16, tmp_s_fu_403_p1, tmp_12_fu_551_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            temp_M_real_address0 <= tmp_12_fu_551_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            temp_M_real_address0 <= temp_M_real_addr_2_reg_717;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp_M_real_address0 <= tmp_s_fu_403_p1(5 - 1 downto 0);
        else 
            temp_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    temp_M_real_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            temp_M_real_ce0 <= ap_const_logic_1;
        else 
            temp_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_M_real_d0_assign_proc : process(ap_CS_fsm_state2, grp_fu_363_p2, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            temp_M_real_d0 <= grp_fu_363_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp_M_real_d0 <= ap_const_lv32_0;
        else 
            temp_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    temp_M_real_load_to_fu_619_p1 <= temp_M_real_q0;

    temp_M_real_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            temp_M_real_we0 <= ap_const_logic_1;
        else 
            temp_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_557_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(state_idx_load_reg_652));
    tmp_11_fu_605_p3 <= 
        p_neg_t_fu_599_p2 when (tmp_16_fu_562_p3(0) = '1') else 
        p_and_f_fu_574_p3;
    tmp_12_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmpidx_fu_546_p2),64));
    tmp_13_fu_477_p2 <= std_logic_vector(unsigned(idx_fu_460_p2) + unsigned(ap_const_lv8_E8));
    tmp_14_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_477_p2),64));
    tmp_15_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_cast_reg_663),64));
    tmp_16_fu_562_p3 <= tmp_10_fu_557_p2(3 downto 3);
    tmp_17_fu_570_p1 <= tmp_10_fu_557_p2(2 - 1 downto 0);
    tmp_18_fu_582_p1 <= state_idx_load_reg_652(2 - 1 downto 0);
    tmp_19_fu_585_p2 <= (tmp_18_fu_582_p1 xor ap_const_lv2_3);
    tmp_1_fu_409_p2 <= "1" when (tmp_8_reg_297 = ap_const_lv5_1F) else "0";
    tmp_20_fu_542_p1 <= i_reg_352(5 - 1 downto 0);
    tmp_21_fu_489_p1 <= in_r_0_data_out(32 - 1 downto 0);
    tmp_2_fu_423_p1 <= p_reg_308(3 - 1 downto 0);
    tmp_3_fu_427_p3 <= (tmp_2_fu_423_p1 & ap_const_lv5_0);
    tmp_4_fu_439_p0 <= state_idx;
        tmp_4_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_439_p0),64));

    tmp_5_fu_452_p3 <= m_reg_320(5 downto 5);
    tmp_6_fu_465_p2 <= "1" when (unsigned(idx_fu_460_p2) < unsigned(ap_const_lv8_18)) else "0";
    tmp_7_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_fu_460_p2),64));
    tmp_9_fu_397_p2 <= std_logic_vector(unsigned(tmp_8_reg_297) + unsigned(ap_const_lv5_1));
    tmp_fu_415_p3 <= p_reg_308(3 downto 3);
    tmp_s_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_297),64));
    tmpidx_fu_546_p2 <= std_logic_vector(unsigned(tmp_20_fu_542_p1) - unsigned(shift_reg_783));
end behav;
