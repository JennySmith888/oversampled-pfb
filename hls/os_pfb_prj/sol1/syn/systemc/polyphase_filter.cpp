// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "polyphase_filter.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic polyphase_filter::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic polyphase_filter::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<19> polyphase_filter::ap_ST_fsm_state1 = "1";
const sc_lv<19> polyphase_filter::ap_ST_fsm_state2 = "10";
const sc_lv<19> polyphase_filter::ap_ST_fsm_state3 = "100";
const sc_lv<19> polyphase_filter::ap_ST_fsm_state4 = "1000";
const sc_lv<19> polyphase_filter::ap_ST_fsm_state5 = "10000";
const sc_lv<19> polyphase_filter::ap_ST_fsm_state6 = "100000";
const sc_lv<19> polyphase_filter::ap_ST_fsm_state7 = "1000000";
const sc_lv<19> polyphase_filter::ap_ST_fsm_state8 = "10000000";
const sc_lv<19> polyphase_filter::ap_ST_fsm_state9 = "100000000";
const sc_lv<19> polyphase_filter::ap_ST_fsm_state10 = "1000000000";
const sc_lv<19> polyphase_filter::ap_ST_fsm_state11 = "10000000000";
const sc_lv<19> polyphase_filter::ap_ST_fsm_state12 = "100000000000";
const sc_lv<19> polyphase_filter::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<19> polyphase_filter::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<19> polyphase_filter::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<19> polyphase_filter::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<19> polyphase_filter::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<19> polyphase_filter::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<19> polyphase_filter::ap_ST_fsm_state19 = "1000000000000000000";
const bool polyphase_filter::ap_const_boolean_1 = true;
const sc_lv<32> polyphase_filter::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> polyphase_filter::ap_const_lv1_0 = "0";
const sc_lv<1> polyphase_filter::ap_const_lv1_1 = "1";
const sc_lv<2> polyphase_filter::ap_const_lv2_0 = "00";
const sc_lv<2> polyphase_filter::ap_const_lv2_2 = "10";
const sc_lv<2> polyphase_filter::ap_const_lv2_3 = "11";
const sc_lv<2> polyphase_filter::ap_const_lv2_1 = "1";
const sc_lv<4> polyphase_filter::ap_const_lv4_0 = "0000";
const sc_lv<32> polyphase_filter::ap_const_lv32_3 = "11";
const sc_lv<32> polyphase_filter::ap_const_lv32_12 = "10010";
const sc_lv<32> polyphase_filter::ap_const_lv32_1 = "1";
const sc_lv<32> polyphase_filter::ap_const_lv32_2 = "10";
const sc_lv<32> polyphase_filter::ap_const_lv32_4 = "100";
const sc_lv<32> polyphase_filter::ap_const_lv32_5 = "101";
const sc_lv<32> polyphase_filter::ap_const_lv32_7 = "111";
const sc_lv<32> polyphase_filter::ap_const_lv32_B = "1011";
const sc_lv<32> polyphase_filter::ap_const_lv32_C = "1100";
const sc_lv<32> polyphase_filter::ap_const_lv32_10 = "10000";
const sc_lv<32> polyphase_filter::ap_const_lv32_11 = "10001";
const sc_lv<5> polyphase_filter::ap_const_lv5_0 = "00000";
const sc_lv<4> polyphase_filter::ap_const_lv4_7 = "111";
const sc_lv<6> polyphase_filter::ap_const_lv6_1F = "11111";
const sc_lv<32> polyphase_filter::ap_const_lv32_F = "1111";
const sc_lv<6> polyphase_filter::ap_const_lv6_0 = "000000";
const sc_lv<8> polyphase_filter::ap_const_lv8_0 = "00000000";
const sc_lv<32> polyphase_filter::ap_const_lv32_8 = "1000";
const sc_lv<32> polyphase_filter::ap_const_lv32_6 = "110";
const sc_lv<5> polyphase_filter::ap_const_lv5_1 = "1";
const sc_lv<5> polyphase_filter::ap_const_lv5_1F = "11111";
const sc_lv<8> polyphase_filter::ap_const_lv8_18 = "11000";
const sc_lv<8> polyphase_filter::ap_const_lv8_E8 = "11101000";
const sc_lv<32> polyphase_filter::ap_const_lv32_20 = "100000";
const sc_lv<32> polyphase_filter::ap_const_lv32_3F = "111111";
const sc_lv<4> polyphase_filter::ap_const_lv4_F = "1111";
const sc_lv<6> polyphase_filter::ap_const_lv6_3F = "111111";
const sc_lv<6> polyphase_filter::ap_const_lv6_20 = "100000";
const sc_lv<6> polyphase_filter::ap_const_lv6_1 = "1";
const sc_lv<4> polyphase_filter::ap_const_lv4_1 = "1";

polyphase_filter::polyphase_filter(sc_module_name name) : sc_module(name), mVcdFile(0) {
    filter_state_M_real_U = new polyphase_filter_filter_state_M_real("filter_state_M_real_U");
    filter_state_M_real_U->clk(ap_clk);
    filter_state_M_real_U->reset(ap_rst);
    filter_state_M_real_U->address0(filter_state_M_real_address0);
    filter_state_M_real_U->ce0(filter_state_M_real_ce0);
    filter_state_M_real_U->we0(filter_state_M_real_we0);
    filter_state_M_real_U->d0(filter_state_M_real_d0);
    filter_state_M_real_U->q0(filter_state_M_real_q0);
    filter_state_M_imag_U = new polyphase_filter_filter_state_M_real("filter_state_M_imag_U");
    filter_state_M_imag_U->clk(ap_clk);
    filter_state_M_imag_U->reset(ap_rst);
    filter_state_M_imag_U->address0(filter_state_M_imag_address0);
    filter_state_M_imag_U->ce0(filter_state_M_imag_ce0);
    filter_state_M_imag_U->we0(filter_state_M_imag_we0);
    filter_state_M_imag_U->d0(filter_state_M_imag_d0);
    filter_state_M_imag_U->q0(filter_state_M_imag_q0);
    h_U = new polyphase_filter_h("h_U");
    h_U->clk(ap_clk);
    h_U->reset(ap_rst);
    h_U->address0(h_address0);
    h_U->ce0(h_ce0);
    h_U->q0(h_q0);
    shift_states_U = new polyphase_filter_shift_states("shift_states_U");
    shift_states_U->clk(ap_clk);
    shift_states_U->reset(ap_rst);
    shift_states_U->address0(shift_states_address0);
    shift_states_U->ce0(shift_states_ce0);
    shift_states_U->q0(shift_states_q0);
    temp_M_real_U = new polyphase_filter_temp_M_real("temp_M_real_U");
    temp_M_real_U->clk(ap_clk);
    temp_M_real_U->reset(ap_rst);
    temp_M_real_U->address0(temp_M_real_address0);
    temp_M_real_U->ce0(temp_M_real_ce0);
    temp_M_real_U->we0(temp_M_real_we0);
    temp_M_real_U->d0(temp_M_real_d0);
    temp_M_real_U->q0(temp_M_real_q0);
    temp_M_imag_U = new polyphase_filter_temp_M_real("temp_M_imag_U");
    temp_M_imag_U->clk(ap_clk);
    temp_M_imag_U->reset(ap_rst);
    temp_M_imag_U->address0(temp_M_imag_address0);
    temp_M_imag_U->ce0(temp_M_imag_ce0);
    temp_M_imag_U->we0(temp_M_imag_we0);
    temp_M_imag_U->d0(temp_M_imag_d0);
    temp_M_imag_U->q0(temp_M_imag_q0);
    os_pfb_faddfsub_32ns_32ns_32_4_full_dsp_1_U1 = new os_pfb_faddfsub_32ns_32ns_32_4_full_dsp_1<1,4,32,32,32>("os_pfb_faddfsub_32ns_32ns_32_4_full_dsp_1_U1");
    os_pfb_faddfsub_32ns_32ns_32_4_full_dsp_1_U1->clk(ap_clk);
    os_pfb_faddfsub_32ns_32ns_32_4_full_dsp_1_U1->reset(ap_rst);
    os_pfb_faddfsub_32ns_32ns_32_4_full_dsp_1_U1->din0(grp_fu_363_p0);
    os_pfb_faddfsub_32ns_32ns_32_4_full_dsp_1_U1->din1(grp_fu_363_p1);
    os_pfb_faddfsub_32ns_32ns_32_4_full_dsp_1_U1->opcode(grp_fu_363_opcode);
    os_pfb_faddfsub_32ns_32ns_32_4_full_dsp_1_U1->ce(ap_var_for_const0);
    os_pfb_faddfsub_32ns_32ns_32_4_full_dsp_1_U1->dout(grp_fu_363_p2);
    os_pfb_fadd_32ns_32ns_32_4_full_dsp_1_U2 = new os_pfb_fadd_32ns_32ns_32_4_full_dsp_1<1,4,32,32,32>("os_pfb_fadd_32ns_32ns_32_4_full_dsp_1_U2");
    os_pfb_fadd_32ns_32ns_32_4_full_dsp_1_U2->clk(ap_clk);
    os_pfb_fadd_32ns_32ns_32_4_full_dsp_1_U2->reset(ap_rst);
    os_pfb_fadd_32ns_32ns_32_4_full_dsp_1_U2->din0(grp_fu_367_p0);
    os_pfb_fadd_32ns_32ns_32_4_full_dsp_1_U2->din1(grp_fu_367_p1);
    os_pfb_fadd_32ns_32ns_32_4_full_dsp_1_U2->ce(ap_var_for_const0);
    os_pfb_fadd_32ns_32ns_32_4_full_dsp_1_U2->dout(grp_fu_367_p2);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U3 = new os_pfb_fmul_32ns_32ns_32_2_max_dsp_1<1,2,32,32,32>("os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U3");
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U3->clk(ap_clk);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U3->reset(ap_rst);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U3->din0(p_r_M_real_reg_342);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U3->din1(h_load_reg_737);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U3->ce(ap_var_for_const0);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U3->dout(grp_fu_375_p2);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U4 = new os_pfb_fmul_32ns_32ns_32_2_max_dsp_1<1,2,32,32,32>("os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U4");
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U4->clk(ap_clk);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U4->reset(ap_rst);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U4->din0(p_r_M_imag_reg_332);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U4->din1(ap_var_for_const1);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U4->ce(ap_var_for_const0);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U4->dout(grp_fu_380_p2);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U5 = new os_pfb_fmul_32ns_32ns_32_2_max_dsp_1<1,2,32,32,32>("os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U5");
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U5->clk(ap_clk);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U5->reset(ap_rst);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U5->din0(p_r_M_imag_reg_332);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U5->din1(h_load_reg_737);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U5->ce(ap_var_for_const0);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U5->dout(grp_fu_386_p2);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U6 = new os_pfb_fmul_32ns_32ns_32_2_max_dsp_1<1,2,32,32,32>("os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U6");
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U6->clk(ap_clk);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U6->reset(ap_rst);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U6->din0(p_r_M_real_reg_342);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U6->din1(ap_var_for_const1);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U6->ce(ap_var_for_const0);
    os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U6->dout(grp_fu_391_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ifft_config_data_V_full_n );

    SC_METHOD(thread_ap_block_state4);
    sensitive << ( in_r_0_vld_out );
    sensitive << ( ap_predicate_op66_read_state4 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_530_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op66_read_state4);
    sensitive << ( tmp_5_fu_452_p3 );
    sensitive << ( tmp_6_fu_465_p2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_exitcond_fu_530_p2);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( i_reg_352 );

    SC_METHOD(thread_filter_out_blk_n);
    sensitive << ( filter_out_full_n );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_filter_out_din);
    sensitive << ( filter_out_full_n );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( temp_M_imag_load_to_fu_623_p1 );
    sensitive << ( temp_M_real_load_to_fu_619_p1 );

    SC_METHOD(thread_filter_out_write);
    sensitive << ( filter_out_full_n );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_filter_state_M_imag_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_5_fu_452_p3 );
    sensitive << ( tmp_6_fu_465_p2 );
    sensitive << ( tmp_7_fu_471_p1 );
    sensitive << ( tmp_7_reg_675 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_14_fu_483_p1 );

    SC_METHOD(thread_filter_state_M_imag_ce0);
    sensitive << ( in_r_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_5_fu_452_p3 );
    sensitive << ( tmp_6_fu_465_p2 );
    sensitive << ( ap_predicate_op66_read_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_filter_state_M_imag_d0);
    sensitive << ( filter_state_M_imag_q0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_5_fu_452_p3 );
    sensitive << ( tmp_6_fu_465_p2 );
    sensitive << ( in_M_imag_load8_fu_508_p1 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_filter_state_M_imag_we0);
    sensitive << ( in_r_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_5_fu_452_p3 );
    sensitive << ( tmp_6_fu_465_p2 );
    sensitive << ( ap_predicate_op66_read_state4 );
    sensitive << ( tmp_6_reg_671 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_filter_state_M_real_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_5_fu_452_p3 );
    sensitive << ( tmp_6_fu_465_p2 );
    sensitive << ( tmp_7_fu_471_p1 );
    sensitive << ( tmp_7_reg_675 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_14_fu_483_p1 );

    SC_METHOD(thread_filter_state_M_real_ce0);
    sensitive << ( in_r_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_5_fu_452_p3 );
    sensitive << ( tmp_6_fu_465_p2 );
    sensitive << ( ap_predicate_op66_read_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_filter_state_M_real_d0);
    sensitive << ( filter_state_M_real_q0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_5_fu_452_p3 );
    sensitive << ( tmp_6_fu_465_p2 );
    sensitive << ( in_M_real_load4_fu_493_p1 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_filter_state_M_real_we0);
    sensitive << ( in_r_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_5_fu_452_p3 );
    sensitive << ( tmp_6_fu_465_p2 );
    sensitive << ( ap_predicate_op66_read_state4 );
    sensitive << ( tmp_6_reg_671 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_fu_363_opcode);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_grp_fu_363_p0);
    sensitive << ( tmp_i_i_reg_743 );
    sensitive << ( temp_M_real_q0 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_grp_fu_363_p1);
    sensitive << ( tmp_2_i_i_reg_748 );
    sensitive << ( complex_M_real_writ_reg_763 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_grp_fu_367_p0);
    sensitive << ( tmp_4_i_i_reg_753 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( temp_M_imag_q0 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_grp_fu_367_p1);
    sensitive << ( tmp_5_i_i_reg_758 );
    sensitive << ( complex_M_imag_writ_reg_768 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_h_address0);
    sensitive << ( tmp_7_reg_675 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_h_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_i_1_fu_536_p2);
    sensitive << ( i_reg_352 );

    SC_METHOD(thread_idx_fu_460_p2);
    sensitive << ( tmp_3_reg_647 );
    sensitive << ( m_cast1_fu_444_p1 );

    SC_METHOD(thread_ifft_config_data_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ifft_config_data_V_full_n );

    SC_METHOD(thread_ifft_config_data_V_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ifft_config_data_V_full_n );

    SC_METHOD(thread_ifft_config_data_V_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ifft_config_data_V_full_n );

    SC_METHOD(thread_in_M_imag_load8_fu_508_p1);
    sensitive << ( in_M_imag_load_new6_fu_498_p4 );

    SC_METHOD(thread_in_M_imag_load_new6_fu_498_p4);
    sensitive << ( in_r_0_data_out );

    SC_METHOD(thread_in_M_real_load4_fu_493_p1);
    sensitive << ( tmp_21_fu_489_p1 );

    SC_METHOD(thread_in_r_0_ack_in);
    sensitive << ( in_r_0_state );

    SC_METHOD(thread_in_r_0_ack_out);
    sensitive << ( in_r_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_predicate_op66_read_state4 );

    SC_METHOD(thread_in_r_0_data_out);
    sensitive << ( in_r_0_payload_A );
    sensitive << ( in_r_0_payload_B );
    sensitive << ( in_r_0_sel );

    SC_METHOD(thread_in_r_0_load_A);
    sensitive << ( in_r_0_sel_wr );
    sensitive << ( in_r_0_state_cmp_full );

    SC_METHOD(thread_in_r_0_load_B);
    sensitive << ( in_r_0_sel_wr );
    sensitive << ( in_r_0_state_cmp_full );

    SC_METHOD(thread_in_r_0_sel);
    sensitive << ( in_r_0_sel_rd );

    SC_METHOD(thread_in_r_0_state_cmp_full);
    sensitive << ( in_r_0_state );

    SC_METHOD(thread_in_r_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_r_0_vld_out);
    sensitive << ( in_r_0_state );

    SC_METHOD(thread_in_r_TDATA_blk_n);
    sensitive << ( in_r_0_state );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_5_fu_452_p3 );
    sensitive << ( tmp_6_fu_465_p2 );

    SC_METHOD(thread_in_r_TREADY);
    sensitive << ( in_r_0_state );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_530_p2 );

    SC_METHOD(thread_m_1_fu_524_p2);
    sensitive << ( m_reg_320 );

    SC_METHOD(thread_m_cast1_fu_444_p1);
    sensitive << ( m_reg_320 );

    SC_METHOD(thread_m_cast_fu_448_p1);
    sensitive << ( m_reg_320 );

    SC_METHOD(thread_p_1_fu_513_p2);
    sensitive << ( p_reg_308 );

    SC_METHOD(thread_p_and_f_fu_574_p3);
    sensitive << ( tmp_17_fu_570_p1 );

    SC_METHOD(thread_p_and_t_fu_591_p3);
    sensitive << ( tmp_19_fu_585_p2 );

    SC_METHOD(thread_p_neg_t_fu_599_p2);
    sensitive << ( p_and_t_fu_591_p3 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_shift_states_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_4_fu_439_p1 );

    SC_METHOD(thread_shift_states_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_temp_M_imag_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( temp_M_imag_addr_2_reg_722 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( tmp_s_fu_403_p1 );
    sensitive << ( tmp_12_fu_551_p1 );

    SC_METHOD(thread_temp_M_imag_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_temp_M_imag_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_fu_367_p2 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_temp_M_imag_load_to_fu_623_p1);
    sensitive << ( temp_M_imag_q0 );

    SC_METHOD(thread_temp_M_imag_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_temp_M_real_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( temp_M_real_addr_2_reg_717 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( tmp_s_fu_403_p1 );
    sensitive << ( tmp_12_fu_551_p1 );

    SC_METHOD(thread_temp_M_real_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_temp_M_real_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_fu_363_p2 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_temp_M_real_load_to_fu_619_p1);
    sensitive << ( temp_M_real_q0 );

    SC_METHOD(thread_temp_M_real_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_tmp_10_fu_557_p2);
    sensitive << ( state_idx_load_reg_652 );

    SC_METHOD(thread_tmp_11_fu_605_p3);
    sensitive << ( tmp_16_fu_562_p3 );
    sensitive << ( p_neg_t_fu_599_p2 );
    sensitive << ( p_and_f_fu_574_p3 );

    SC_METHOD(thread_tmp_12_fu_551_p1);
    sensitive << ( tmpidx_fu_546_p2 );

    SC_METHOD(thread_tmp_13_fu_477_p2);
    sensitive << ( idx_fu_460_p2 );

    SC_METHOD(thread_tmp_14_fu_483_p1);
    sensitive << ( tmp_13_fu_477_p2 );

    SC_METHOD(thread_tmp_15_fu_519_p1);
    sensitive << ( m_cast_reg_663 );

    SC_METHOD(thread_tmp_16_fu_562_p3);
    sensitive << ( tmp_10_fu_557_p2 );

    SC_METHOD(thread_tmp_17_fu_570_p1);
    sensitive << ( tmp_10_fu_557_p2 );

    SC_METHOD(thread_tmp_18_fu_582_p1);
    sensitive << ( state_idx_load_reg_652 );

    SC_METHOD(thread_tmp_19_fu_585_p2);
    sensitive << ( tmp_18_fu_582_p1 );

    SC_METHOD(thread_tmp_1_fu_409_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_8_reg_297 );

    SC_METHOD(thread_tmp_20_fu_542_p1);
    sensitive << ( i_reg_352 );

    SC_METHOD(thread_tmp_21_fu_489_p1);
    sensitive << ( in_r_0_data_out );

    SC_METHOD(thread_tmp_2_fu_423_p1);
    sensitive << ( p_reg_308 );

    SC_METHOD(thread_tmp_3_fu_427_p3);
    sensitive << ( tmp_2_fu_423_p1 );

    SC_METHOD(thread_tmp_4_fu_439_p0);
    sensitive << ( state_idx );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_4_fu_439_p1);
    sensitive << ( tmp_4_fu_439_p0 );

    SC_METHOD(thread_tmp_5_fu_452_p3);
    sensitive << ( m_reg_320 );

    SC_METHOD(thread_tmp_6_fu_465_p2);
    sensitive << ( in_r_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_5_fu_452_p3 );
    sensitive << ( ap_predicate_op66_read_state4 );
    sensitive << ( idx_fu_460_p2 );

    SC_METHOD(thread_tmp_7_fu_471_p1);
    sensitive << ( idx_fu_460_p2 );

    SC_METHOD(thread_tmp_9_fu_397_p2);
    sensitive << ( tmp_8_reg_297 );

    SC_METHOD(thread_tmp_fu_415_p3);
    sensitive << ( p_reg_308 );

    SC_METHOD(thread_tmp_s_fu_403_p1);
    sensitive << ( tmp_8_reg_297 );

    SC_METHOD(thread_tmpidx_fu_546_p2);
    sensitive << ( shift_reg_783 );
    sensitive << ( tmp_20_fu_542_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_r_0_vld_out );
    sensitive << ( filter_out_full_n );
    sensitive << ( ifft_config_data_V_full_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_5_fu_452_p3 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_415_p3 );
    sensitive << ( ap_predicate_op66_read_state4 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond_fu_530_p2 );
    sensitive << ( tmp_1_fu_409_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0000000000000000001";
    in_r_0_sel_rd = SC_LOGIC_0;
    in_r_0_sel_wr = SC_LOGIC_0;
    in_r_0_state = "00";
    state_idx = "0000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "polyphase_filter_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, in_r_TDATA, "(port)in_r_TDATA");
    sc_trace(mVcdFile, in_r_TVALID, "(port)in_r_TVALID");
    sc_trace(mVcdFile, in_r_TREADY, "(port)in_r_TREADY");
    sc_trace(mVcdFile, filter_out_din, "(port)filter_out_din");
    sc_trace(mVcdFile, filter_out_full_n, "(port)filter_out_full_n");
    sc_trace(mVcdFile, filter_out_write, "(port)filter_out_write");
    sc_trace(mVcdFile, ifft_config_data_V_din, "(port)ifft_config_data_V_din");
    sc_trace(mVcdFile, ifft_config_data_V_full_n, "(port)ifft_config_data_V_full_n");
    sc_trace(mVcdFile, ifft_config_data_V_write, "(port)ifft_config_data_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, in_r_0_data_out, "in_r_0_data_out");
    sc_trace(mVcdFile, in_r_0_vld_in, "in_r_0_vld_in");
    sc_trace(mVcdFile, in_r_0_vld_out, "in_r_0_vld_out");
    sc_trace(mVcdFile, in_r_0_ack_in, "in_r_0_ack_in");
    sc_trace(mVcdFile, in_r_0_ack_out, "in_r_0_ack_out");
    sc_trace(mVcdFile, in_r_0_payload_A, "in_r_0_payload_A");
    sc_trace(mVcdFile, in_r_0_payload_B, "in_r_0_payload_B");
    sc_trace(mVcdFile, in_r_0_sel_rd, "in_r_0_sel_rd");
    sc_trace(mVcdFile, in_r_0_sel_wr, "in_r_0_sel_wr");
    sc_trace(mVcdFile, in_r_0_sel, "in_r_0_sel");
    sc_trace(mVcdFile, in_r_0_load_A, "in_r_0_load_A");
    sc_trace(mVcdFile, in_r_0_load_B, "in_r_0_load_B");
    sc_trace(mVcdFile, in_r_0_state, "in_r_0_state");
    sc_trace(mVcdFile, in_r_0_state_cmp_full, "in_r_0_state_cmp_full");
    sc_trace(mVcdFile, filter_state_M_real_address0, "filter_state_M_real_address0");
    sc_trace(mVcdFile, filter_state_M_real_ce0, "filter_state_M_real_ce0");
    sc_trace(mVcdFile, filter_state_M_real_we0, "filter_state_M_real_we0");
    sc_trace(mVcdFile, filter_state_M_real_d0, "filter_state_M_real_d0");
    sc_trace(mVcdFile, filter_state_M_real_q0, "filter_state_M_real_q0");
    sc_trace(mVcdFile, filter_state_M_imag_address0, "filter_state_M_imag_address0");
    sc_trace(mVcdFile, filter_state_M_imag_ce0, "filter_state_M_imag_ce0");
    sc_trace(mVcdFile, filter_state_M_imag_we0, "filter_state_M_imag_we0");
    sc_trace(mVcdFile, filter_state_M_imag_d0, "filter_state_M_imag_d0");
    sc_trace(mVcdFile, filter_state_M_imag_q0, "filter_state_M_imag_q0");
    sc_trace(mVcdFile, h_address0, "h_address0");
    sc_trace(mVcdFile, h_ce0, "h_ce0");
    sc_trace(mVcdFile, h_q0, "h_q0");
    sc_trace(mVcdFile, state_idx, "state_idx");
    sc_trace(mVcdFile, shift_states_address0, "shift_states_address0");
    sc_trace(mVcdFile, shift_states_ce0, "shift_states_ce0");
    sc_trace(mVcdFile, shift_states_q0, "shift_states_q0");
    sc_trace(mVcdFile, in_r_TDATA_blk_n, "in_r_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_5_fu_452_p3, "tmp_5_fu_452_p3");
    sc_trace(mVcdFile, tmp_6_fu_465_p2, "tmp_6_fu_465_p2");
    sc_trace(mVcdFile, filter_out_blk_n, "filter_out_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ifft_config_data_V_blk_n, "ifft_config_data_V_blk_n");
    sc_trace(mVcdFile, tmp_9_fu_397_p2, "tmp_9_fu_397_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_3_fu_427_p3, "tmp_3_fu_427_p3");
    sc_trace(mVcdFile, tmp_3_reg_647, "tmp_3_reg_647");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_fu_415_p3, "tmp_fu_415_p3");
    sc_trace(mVcdFile, state_idx_load_reg_652, "state_idx_load_reg_652");
    sc_trace(mVcdFile, m_cast_fu_448_p1, "m_cast_fu_448_p1");
    sc_trace(mVcdFile, m_cast_reg_663, "m_cast_reg_663");
    sc_trace(mVcdFile, ap_predicate_op66_read_state4, "ap_predicate_op66_read_state4");
    sc_trace(mVcdFile, ap_block_state4, "ap_block_state4");
    sc_trace(mVcdFile, tmp_6_reg_671, "tmp_6_reg_671");
    sc_trace(mVcdFile, tmp_7_fu_471_p1, "tmp_7_fu_471_p1");
    sc_trace(mVcdFile, tmp_7_reg_675, "tmp_7_reg_675");
    sc_trace(mVcdFile, in_M_real_load4_fu_493_p1, "in_M_real_load4_fu_493_p1");
    sc_trace(mVcdFile, in_M_imag_load8_fu_508_p1, "in_M_imag_load8_fu_508_p1");
    sc_trace(mVcdFile, p_1_fu_513_p2, "p_1_fu_513_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, temp_M_real_addr_2_reg_717, "temp_M_real_addr_2_reg_717");
    sc_trace(mVcdFile, temp_M_imag_addr_2_reg_722, "temp_M_imag_addr_2_reg_722");
    sc_trace(mVcdFile, m_1_fu_524_p2, "m_1_fu_524_p2");
    sc_trace(mVcdFile, m_1_reg_732, "m_1_reg_732");
    sc_trace(mVcdFile, h_load_reg_737, "h_load_reg_737");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_fu_375_p2, "grp_fu_375_p2");
    sc_trace(mVcdFile, tmp_i_i_reg_743, "tmp_i_i_reg_743");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_380_p2, "grp_fu_380_p2");
    sc_trace(mVcdFile, tmp_2_i_i_reg_748, "tmp_2_i_i_reg_748");
    sc_trace(mVcdFile, grp_fu_386_p2, "grp_fu_386_p2");
    sc_trace(mVcdFile, tmp_4_i_i_reg_753, "tmp_4_i_i_reg_753");
    sc_trace(mVcdFile, grp_fu_391_p2, "grp_fu_391_p2");
    sc_trace(mVcdFile, tmp_5_i_i_reg_758, "tmp_5_i_i_reg_758");
    sc_trace(mVcdFile, grp_fu_363_p2, "grp_fu_363_p2");
    sc_trace(mVcdFile, complex_M_real_writ_reg_763, "complex_M_real_writ_reg_763");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, grp_fu_367_p2, "grp_fu_367_p2");
    sc_trace(mVcdFile, complex_M_imag_writ_reg_768, "complex_M_imag_writ_reg_768");
    sc_trace(mVcdFile, temp_M_real_q0, "temp_M_real_q0");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, temp_M_imag_q0, "temp_M_imag_q0");
    sc_trace(mVcdFile, shift_reg_783, "shift_reg_783");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, i_1_fu_536_p2, "i_1_fu_536_p2");
    sc_trace(mVcdFile, i_1_reg_791, "i_1_reg_791");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, exitcond_fu_530_p2, "exitcond_fu_530_p2");
    sc_trace(mVcdFile, temp_M_real_address0, "temp_M_real_address0");
    sc_trace(mVcdFile, temp_M_real_ce0, "temp_M_real_ce0");
    sc_trace(mVcdFile, temp_M_real_we0, "temp_M_real_we0");
    sc_trace(mVcdFile, temp_M_real_d0, "temp_M_real_d0");
    sc_trace(mVcdFile, temp_M_imag_address0, "temp_M_imag_address0");
    sc_trace(mVcdFile, temp_M_imag_ce0, "temp_M_imag_ce0");
    sc_trace(mVcdFile, temp_M_imag_we0, "temp_M_imag_we0");
    sc_trace(mVcdFile, temp_M_imag_d0, "temp_M_imag_d0");
    sc_trace(mVcdFile, tmp_8_reg_297, "tmp_8_reg_297");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_1_fu_409_p2, "tmp_1_fu_409_p2");
    sc_trace(mVcdFile, p_reg_308, "p_reg_308");
    sc_trace(mVcdFile, m_reg_320, "m_reg_320");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, p_r_M_imag_reg_332, "p_r_M_imag_reg_332");
    sc_trace(mVcdFile, p_r_M_real_reg_342, "p_r_M_real_reg_342");
    sc_trace(mVcdFile, i_reg_352, "i_reg_352");
    sc_trace(mVcdFile, tmp_s_fu_403_p1, "tmp_s_fu_403_p1");
    sc_trace(mVcdFile, tmp_4_fu_439_p1, "tmp_4_fu_439_p1");
    sc_trace(mVcdFile, tmp_14_fu_483_p1, "tmp_14_fu_483_p1");
    sc_trace(mVcdFile, tmp_15_fu_519_p1, "tmp_15_fu_519_p1");
    sc_trace(mVcdFile, tmp_12_fu_551_p1, "tmp_12_fu_551_p1");
    sc_trace(mVcdFile, tmp_11_fu_605_p3, "tmp_11_fu_605_p3");
    sc_trace(mVcdFile, grp_fu_363_p0, "grp_fu_363_p0");
    sc_trace(mVcdFile, grp_fu_363_p1, "grp_fu_363_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_fu_367_p0, "grp_fu_367_p0");
    sc_trace(mVcdFile, grp_fu_367_p1, "grp_fu_367_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_2_fu_423_p1, "tmp_2_fu_423_p1");
    sc_trace(mVcdFile, tmp_4_fu_439_p0, "tmp_4_fu_439_p0");
    sc_trace(mVcdFile, m_cast1_fu_444_p1, "m_cast1_fu_444_p1");
    sc_trace(mVcdFile, idx_fu_460_p2, "idx_fu_460_p2");
    sc_trace(mVcdFile, tmp_13_fu_477_p2, "tmp_13_fu_477_p2");
    sc_trace(mVcdFile, tmp_21_fu_489_p1, "tmp_21_fu_489_p1");
    sc_trace(mVcdFile, in_M_imag_load_new6_fu_498_p4, "in_M_imag_load_new6_fu_498_p4");
    sc_trace(mVcdFile, tmp_20_fu_542_p1, "tmp_20_fu_542_p1");
    sc_trace(mVcdFile, tmpidx_fu_546_p2, "tmpidx_fu_546_p2");
    sc_trace(mVcdFile, tmp_10_fu_557_p2, "tmp_10_fu_557_p2");
    sc_trace(mVcdFile, tmp_17_fu_570_p1, "tmp_17_fu_570_p1");
    sc_trace(mVcdFile, tmp_18_fu_582_p1, "tmp_18_fu_582_p1");
    sc_trace(mVcdFile, tmp_19_fu_585_p2, "tmp_19_fu_585_p2");
    sc_trace(mVcdFile, p_and_t_fu_591_p3, "p_and_t_fu_591_p3");
    sc_trace(mVcdFile, tmp_16_fu_562_p3, "tmp_16_fu_562_p3");
    sc_trace(mVcdFile, p_neg_t_fu_599_p2, "p_neg_t_fu_599_p2");
    sc_trace(mVcdFile, p_and_f_fu_574_p3, "p_and_f_fu_574_p3");
    sc_trace(mVcdFile, temp_M_imag_load_to_fu_623_p1, "temp_M_imag_load_to_fu_623_p1");
    sc_trace(mVcdFile, temp_M_real_load_to_fu_619_p1, "temp_M_real_load_to_fu_619_p1");
    sc_trace(mVcdFile, grp_fu_363_opcode, "grp_fu_363_opcode");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

polyphase_filter::~polyphase_filter() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete filter_state_M_real_U;
    delete filter_state_M_imag_U;
    delete h_U;
    delete shift_states_U;
    delete temp_M_real_U;
    delete temp_M_imag_U;
    delete os_pfb_faddfsub_32ns_32ns_32_4_full_dsp_1_U1;
    delete os_pfb_fadd_32ns_32ns_32_4_full_dsp_1_U2;
    delete os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U3;
    delete os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U4;
    delete os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U5;
    delete os_pfb_fmul_32ns_32ns_32_2_max_dsp_1_U6;
}

void polyphase_filter::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void polyphase_filter::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void polyphase_filter::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_530_p2.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
         esl_seteq<1,1,1>(filter_out_full_n.read(), ap_const_logic_1))) {
        i_reg_352 = i_1_reg_791.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        i_reg_352 = ap_const_lv6_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_r_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_vld_out.read()))) {
            in_r_0_sel_rd =  (sc_logic) (~in_r_0_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_r_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_ack_in.read()))) {
            in_r_0_sel_wr =  (sc_logic) (~in_r_0_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_r_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_ack_out.read()) && 
              esl_seteq<1,2,2>(in_r_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_in.read()) && 
              esl_seteq<1,2,2>(in_r_0_state.read(), ap_const_lv2_2)))) {
            in_r_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_r_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_r_0_state.read(), ap_const_lv2_1)))) {
            in_r_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(in_r_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_r_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(in_r_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_ack_out.read()))))) {
            in_r_0_state = ap_const_lv2_3;
        } else {
            in_r_0_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        m_reg_320 = m_1_reg_732.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_415_p3.read()))) {
        m_reg_320 = ap_const_lv6_1F;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_452_p3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_465_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op66_read_state4.read())))) {
        p_r_M_imag_reg_332 = in_M_imag_load8_fu_508_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_671.read()))) {
        p_r_M_imag_reg_332 = filter_state_M_imag_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_452_p3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_465_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op66_read_state4.read())))) {
        p_r_M_real_reg_342 = in_M_real_load4_fu_493_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_671.read()))) {
        p_r_M_real_reg_342 = filter_state_M_real_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_fu_409_p2.read()))) {
        p_reg_308 = ap_const_lv4_7;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op66_read_state4.read())) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_452_p3.read()))) {
        p_reg_308 = p_1_fu_513_p2.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_409_p2.read()))) {
        tmp_8_reg_297 = tmp_9_fu_397_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, ifft_config_data_V_full_n.read())))) {
        tmp_8_reg_297 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        complex_M_imag_writ_reg_768 = grp_fu_367_p2.read();
        complex_M_real_writ_reg_763 = grp_fu_363_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        h_load_reg_737 = h_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        i_1_reg_791 = i_1_fu_536_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_load_A.read())) {
        in_r_0_payload_A = in_r_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_load_B.read())) {
        in_r_0_payload_B = in_r_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        m_1_reg_732 = m_1_fu_524_p2.read();
        temp_M_imag_addr_2_reg_722 =  (sc_lv<5>) (tmp_15_fu_519_p1.read());
        temp_M_real_addr_2_reg_717 =  (sc_lv<5>) (tmp_15_fu_519_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op66_read_state4.read())))) {
        m_cast_reg_663 = m_cast_fu_448_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        shift_reg_783 = shift_states_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_530_p2.read()))) {
        state_idx = tmp_11_fu_605_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_415_p3.read()))) {
        state_idx_load_reg_652 = state_idx.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_2_i_i_reg_748 = grp_fu_380_p2.read();
        tmp_4_i_i_reg_753 = grp_fu_386_p2.read();
        tmp_5_i_i_reg_758 = grp_fu_391_p2.read();
        tmp_i_i_reg_743 = grp_fu_375_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_415_p3.read()))) {
        tmp_3_reg_647 = tmp_3_fu_427_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_452_p3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op66_read_state4.read())))) {
        tmp_6_reg_671 = tmp_6_fu_465_p2.read();
        tmp_7_reg_675 = tmp_7_fu_471_p1.read();
    }
}

void polyphase_filter::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void polyphase_filter::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void polyphase_filter::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void polyphase_filter::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void polyphase_filter::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void polyphase_filter::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void polyphase_filter::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void polyphase_filter::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void polyphase_filter::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void polyphase_filter::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void polyphase_filter::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void polyphase_filter::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void polyphase_filter::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void polyphase_filter::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void polyphase_filter::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void polyphase_filter::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, ifft_config_data_V_full_n.read()));
}

void polyphase_filter::thread_ap_block_state4() {
    ap_block_state4 = (esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op66_read_state4.read()));
}

void polyphase_filter::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_530_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void polyphase_filter::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void polyphase_filter::thread_ap_predicate_op66_read_state4() {
    ap_predicate_op66_read_state4 = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_452_p3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_465_p2.read()));
}

void polyphase_filter::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void polyphase_filter::thread_exitcond_fu_530_p2() {
    exitcond_fu_530_p2 = (!i_reg_352.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_352.read() == ap_const_lv6_20);
}

void polyphase_filter::thread_filter_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        filter_out_blk_n = filter_out_full_n.read();
    } else {
        filter_out_blk_n = ap_const_logic_1;
    }
}

void polyphase_filter::thread_filter_out_din() {
    filter_out_din = esl_concat<32,32>(temp_M_imag_load_to_fu_623_p1.read(), temp_M_real_load_to_fu_619_p1.read());
}

void polyphase_filter::thread_filter_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
         esl_seteq<1,1,1>(filter_out_full_n.read(), ap_const_logic_1))) {
        filter_out_write = ap_const_logic_1;
    } else {
        filter_out_write = ap_const_logic_0;
    }
}

void polyphase_filter::thread_filter_state_M_imag_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        filter_state_M_imag_address0 =  (sc_lv<8>) (tmp_7_reg_675.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_452_p3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_465_p2.read()))) {
        filter_state_M_imag_address0 =  (sc_lv<8>) (tmp_7_fu_471_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_452_p3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_465_p2.read()))) {
        filter_state_M_imag_address0 =  (sc_lv<8>) (tmp_14_fu_483_p1.read());
    } else {
        filter_state_M_imag_address0 = "XXXXXXXX";
    }
}

void polyphase_filter::thread_filter_state_M_imag_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_452_p3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op66_read_state4.read())) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_465_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_452_p3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_465_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op66_read_state4.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        filter_state_M_imag_ce0 = ap_const_logic_1;
    } else {
        filter_state_M_imag_ce0 = ap_const_logic_0;
    }
}

void polyphase_filter::thread_filter_state_M_imag_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        filter_state_M_imag_d0 = filter_state_M_imag_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_452_p3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_465_p2.read()))) {
        filter_state_M_imag_d0 = in_M_imag_load8_fu_508_p1.read();
    } else {
        filter_state_M_imag_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void polyphase_filter::thread_filter_state_M_imag_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_452_p3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_465_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op66_read_state4.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_671.read())))) {
        filter_state_M_imag_we0 = ap_const_logic_1;
    } else {
        filter_state_M_imag_we0 = ap_const_logic_0;
    }
}

void polyphase_filter::thread_filter_state_M_real_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        filter_state_M_real_address0 =  (sc_lv<8>) (tmp_7_reg_675.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_452_p3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_465_p2.read()))) {
        filter_state_M_real_address0 =  (sc_lv<8>) (tmp_7_fu_471_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_452_p3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_465_p2.read()))) {
        filter_state_M_real_address0 =  (sc_lv<8>) (tmp_14_fu_483_p1.read());
    } else {
        filter_state_M_real_address0 = "XXXXXXXX";
    }
}

void polyphase_filter::thread_filter_state_M_real_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_452_p3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op66_read_state4.read())) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_465_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_452_p3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_465_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op66_read_state4.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        filter_state_M_real_ce0 = ap_const_logic_1;
    } else {
        filter_state_M_real_ce0 = ap_const_logic_0;
    }
}

void polyphase_filter::thread_filter_state_M_real_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        filter_state_M_real_d0 = filter_state_M_real_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_452_p3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_465_p2.read()))) {
        filter_state_M_real_d0 = in_M_real_load4_fu_493_p1.read();
    } else {
        filter_state_M_real_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void polyphase_filter::thread_filter_state_M_real_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_452_p3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_465_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op66_read_state4.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_reg_671.read())))) {
        filter_state_M_real_we0 = ap_const_logic_1;
    } else {
        filter_state_M_real_we0 = ap_const_logic_0;
    }
}

void polyphase_filter::thread_grp_fu_363_opcode() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_363_opcode = ap_const_lv2_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_363_opcode = ap_const_lv2_0;
    } else {
        grp_fu_363_opcode =  (sc_lv<2>) ("XX");
    }
}

void polyphase_filter::thread_grp_fu_363_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_363_p0 = temp_M_real_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_363_p0 = tmp_i_i_reg_743.read();
    } else {
        grp_fu_363_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void polyphase_filter::thread_grp_fu_363_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_363_p1 = complex_M_real_writ_reg_763.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_363_p1 = tmp_2_i_i_reg_748.read();
    } else {
        grp_fu_363_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void polyphase_filter::thread_grp_fu_367_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_367_p0 = temp_M_imag_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_367_p0 = tmp_4_i_i_reg_753.read();
    } else {
        grp_fu_367_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void polyphase_filter::thread_grp_fu_367_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_367_p1 = complex_M_imag_writ_reg_768.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_367_p1 = tmp_5_i_i_reg_758.read();
    } else {
        grp_fu_367_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void polyphase_filter::thread_h_address0() {
    h_address0 =  (sc_lv<8>) (tmp_7_reg_675.read());
}

void polyphase_filter::thread_h_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        h_ce0 = ap_const_logic_1;
    } else {
        h_ce0 = ap_const_logic_0;
    }
}

void polyphase_filter::thread_i_1_fu_536_p2() {
    i_1_fu_536_p2 = (!i_reg_352.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_reg_352.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void polyphase_filter::thread_idx_fu_460_p2() {
    idx_fu_460_p2 = (!tmp_3_reg_647.read().is_01() || !m_cast1_fu_444_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(tmp_3_reg_647.read()) + sc_bigint<8>(m_cast1_fu_444_p1.read()));
}

void polyphase_filter::thread_ifft_config_data_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ifft_config_data_V_blk_n = ifft_config_data_V_full_n.read();
    } else {
        ifft_config_data_V_blk_n = ap_const_logic_1;
    }
}

void polyphase_filter::thread_ifft_config_data_V_din() {
    ifft_config_data_V_din = ap_const_lv8_0;
}

void polyphase_filter::thread_ifft_config_data_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, ifft_config_data_V_full_n.read())))) {
        ifft_config_data_V_write = ap_const_logic_1;
    } else {
        ifft_config_data_V_write = ap_const_logic_0;
    }
}

void polyphase_filter::thread_in_M_imag_load8_fu_508_p1() {
    in_M_imag_load8_fu_508_p1 = in_M_imag_load_new6_fu_498_p4.read();
}

void polyphase_filter::thread_in_M_imag_load_new6_fu_498_p4() {
    in_M_imag_load_new6_fu_498_p4 = in_r_0_data_out.read().range(63, 32);
}

void polyphase_filter::thread_in_M_real_load4_fu_493_p1() {
    in_M_real_load4_fu_493_p1 = tmp_21_fu_489_p1.read();
}

void polyphase_filter::thread_in_r_0_ack_in() {
    in_r_0_ack_in = in_r_0_state.read()[1];
}

void polyphase_filter::thread_in_r_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op66_read_state4.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op66_read_state4.read())))) {
        in_r_0_ack_out = ap_const_logic_1;
    } else {
        in_r_0_ack_out = ap_const_logic_0;
    }
}

void polyphase_filter::thread_in_r_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_sel.read())) {
        in_r_0_data_out = in_r_0_payload_B.read();
    } else {
        in_r_0_data_out = in_r_0_payload_A.read();
    }
}

void polyphase_filter::thread_in_r_0_load_A() {
    in_r_0_load_A = (in_r_0_state_cmp_full.read() & ~in_r_0_sel_wr.read());
}

void polyphase_filter::thread_in_r_0_load_B() {
    in_r_0_load_B = (in_r_0_sel_wr.read() & in_r_0_state_cmp_full.read());
}

void polyphase_filter::thread_in_r_0_sel() {
    in_r_0_sel = in_r_0_sel_rd.read();
}

void polyphase_filter::thread_in_r_0_state_cmp_full() {
    in_r_0_state_cmp_full =  (sc_logic) ((!in_r_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_r_0_state.read() != ap_const_lv2_1))[0];
}

void polyphase_filter::thread_in_r_0_vld_in() {
    in_r_0_vld_in = in_r_TVALID.read();
}

void polyphase_filter::thread_in_r_0_vld_out() {
    in_r_0_vld_out = in_r_0_state.read()[0];
}

void polyphase_filter::thread_in_r_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_452_p3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_465_p2.read()))) {
        in_r_TDATA_blk_n = in_r_0_state.read()[0];
    } else {
        in_r_TDATA_blk_n = ap_const_logic_1;
    }
}

void polyphase_filter::thread_in_r_TREADY() {
    in_r_TREADY = in_r_0_state.read()[1];
}

void polyphase_filter::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_530_p2.read()))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void polyphase_filter::thread_m_1_fu_524_p2() {
    m_1_fu_524_p2 = (!m_reg_320.read().is_01() || !ap_const_lv6_3F.is_01())? sc_lv<6>(): (sc_bigint<6>(m_reg_320.read()) + sc_bigint<6>(ap_const_lv6_3F));
}

void polyphase_filter::thread_m_cast1_fu_444_p1() {
    m_cast1_fu_444_p1 = esl_sext<8,6>(m_reg_320.read());
}

void polyphase_filter::thread_m_cast_fu_448_p1() {
    m_cast_fu_448_p1 = esl_sext<32,6>(m_reg_320.read());
}

void polyphase_filter::thread_p_1_fu_513_p2() {
    p_1_fu_513_p2 = (!p_reg_308.read().is_01() || !ap_const_lv4_F.is_01())? sc_lv<4>(): (sc_biguint<4>(p_reg_308.read()) + sc_bigint<4>(ap_const_lv4_F));
}

void polyphase_filter::thread_p_and_f_fu_574_p3() {
    p_and_f_fu_574_p3 = esl_concat<2,2>(ap_const_lv2_0, tmp_17_fu_570_p1.read());
}

void polyphase_filter::thread_p_and_t_fu_591_p3() {
    p_and_t_fu_591_p3 = esl_concat<2,2>(ap_const_lv2_0, tmp_19_fu_585_p2.read());
}

void polyphase_filter::thread_p_neg_t_fu_599_p2() {
    p_neg_t_fu_599_p2 = (!ap_const_lv4_0.is_01() || !p_and_t_fu_591_p3.read().is_01())? sc_lv<4>(): (sc_biguint<4>(ap_const_lv4_0) - sc_biguint<4>(p_and_t_fu_591_p3.read()));
}

void polyphase_filter::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void polyphase_filter::thread_shift_states_address0() {
    shift_states_address0 =  (sc_lv<2>) (tmp_4_fu_439_p1.read());
}

void polyphase_filter::thread_shift_states_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        shift_states_ce0 = ap_const_logic_1;
    } else {
        shift_states_ce0 = ap_const_logic_0;
    }
}

void polyphase_filter::thread_start_out() {
    start_out = real_start.read();
}

void polyphase_filter::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void polyphase_filter::thread_temp_M_imag_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        temp_M_imag_address0 =  (sc_lv<5>) (tmp_12_fu_551_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        temp_M_imag_address0 = temp_M_imag_addr_2_reg_722.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        temp_M_imag_address0 =  (sc_lv<5>) (tmp_s_fu_403_p1.read());
    } else {
        temp_M_imag_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void polyphase_filter::thread_temp_M_imag_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        temp_M_imag_ce0 = ap_const_logic_1;
    } else {
        temp_M_imag_ce0 = ap_const_logic_0;
    }
}

void polyphase_filter::thread_temp_M_imag_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        temp_M_imag_d0 = grp_fu_367_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        temp_M_imag_d0 = ap_const_lv32_0;
    } else {
        temp_M_imag_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void polyphase_filter::thread_temp_M_imag_load_to_fu_623_p1() {
    temp_M_imag_load_to_fu_623_p1 = temp_M_imag_q0.read();
}

void polyphase_filter::thread_temp_M_imag_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        temp_M_imag_we0 = ap_const_logic_1;
    } else {
        temp_M_imag_we0 = ap_const_logic_0;
    }
}

void polyphase_filter::thread_temp_M_real_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        temp_M_real_address0 =  (sc_lv<5>) (tmp_12_fu_551_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        temp_M_real_address0 = temp_M_real_addr_2_reg_717.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        temp_M_real_address0 =  (sc_lv<5>) (tmp_s_fu_403_p1.read());
    } else {
        temp_M_real_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void polyphase_filter::thread_temp_M_real_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        temp_M_real_ce0 = ap_const_logic_1;
    } else {
        temp_M_real_ce0 = ap_const_logic_0;
    }
}

void polyphase_filter::thread_temp_M_real_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        temp_M_real_d0 = grp_fu_363_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        temp_M_real_d0 = ap_const_lv32_0;
    } else {
        temp_M_real_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void polyphase_filter::thread_temp_M_real_load_to_fu_619_p1() {
    temp_M_real_load_to_fu_619_p1 = temp_M_real_q0.read();
}

void polyphase_filter::thread_temp_M_real_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        temp_M_real_we0 = ap_const_logic_1;
    } else {
        temp_M_real_we0 = ap_const_logic_0;
    }
}

void polyphase_filter::thread_tmp_10_fu_557_p2() {
    tmp_10_fu_557_p2 = (!ap_const_lv4_1.is_01() || !state_idx_load_reg_652.read().is_01())? sc_lv<4>(): (sc_biguint<4>(ap_const_lv4_1) + sc_bigint<4>(state_idx_load_reg_652.read()));
}

void polyphase_filter::thread_tmp_11_fu_605_p3() {
    tmp_11_fu_605_p3 = (!tmp_16_fu_562_p3.read()[0].is_01())? sc_lv<4>(): ((tmp_16_fu_562_p3.read()[0].to_bool())? p_neg_t_fu_599_p2.read(): p_and_f_fu_574_p3.read());
}

void polyphase_filter::thread_tmp_12_fu_551_p1() {
    tmp_12_fu_551_p1 = esl_zext<64,5>(tmpidx_fu_546_p2.read());
}

void polyphase_filter::thread_tmp_13_fu_477_p2() {
    tmp_13_fu_477_p2 = (!idx_fu_460_p2.read().is_01() || !ap_const_lv8_E8.is_01())? sc_lv<8>(): (sc_biguint<8>(idx_fu_460_p2.read()) + sc_bigint<8>(ap_const_lv8_E8));
}

void polyphase_filter::thread_tmp_14_fu_483_p1() {
    tmp_14_fu_483_p1 = esl_zext<64,8>(tmp_13_fu_477_p2.read());
}

void polyphase_filter::thread_tmp_15_fu_519_p1() {
    tmp_15_fu_519_p1 = esl_zext<64,32>(m_cast_reg_663.read());
}

void polyphase_filter::thread_tmp_16_fu_562_p3() {
    tmp_16_fu_562_p3 = tmp_10_fu_557_p2.read().range(3, 3);
}

void polyphase_filter::thread_tmp_17_fu_570_p1() {
    tmp_17_fu_570_p1 = tmp_10_fu_557_p2.read().range(2-1, 0);
}

void polyphase_filter::thread_tmp_18_fu_582_p1() {
    tmp_18_fu_582_p1 = state_idx_load_reg_652.read().range(2-1, 0);
}

void polyphase_filter::thread_tmp_19_fu_585_p2() {
    tmp_19_fu_585_p2 = (tmp_18_fu_582_p1.read() ^ ap_const_lv2_3);
}

void polyphase_filter::thread_tmp_1_fu_409_p2() {
    tmp_1_fu_409_p2 = (!tmp_8_reg_297.read().is_01() || !ap_const_lv5_1F.is_01())? sc_lv<1>(): sc_lv<1>(tmp_8_reg_297.read() == ap_const_lv5_1F);
}

void polyphase_filter::thread_tmp_20_fu_542_p1() {
    tmp_20_fu_542_p1 = i_reg_352.read().range(5-1, 0);
}

void polyphase_filter::thread_tmp_21_fu_489_p1() {
    tmp_21_fu_489_p1 = in_r_0_data_out.read().range(32-1, 0);
}

void polyphase_filter::thread_tmp_2_fu_423_p1() {
    tmp_2_fu_423_p1 = p_reg_308.read().range(3-1, 0);
}

void polyphase_filter::thread_tmp_3_fu_427_p3() {
    tmp_3_fu_427_p3 = esl_concat<3,5>(tmp_2_fu_423_p1.read(), ap_const_lv5_0);
}

void polyphase_filter::thread_tmp_4_fu_439_p0() {
    tmp_4_fu_439_p0 = state_idx.read();
}

void polyphase_filter::thread_tmp_4_fu_439_p1() {
    tmp_4_fu_439_p1 = esl_sext<64,4>(tmp_4_fu_439_p0.read());
}

void polyphase_filter::thread_tmp_5_fu_452_p3() {
    tmp_5_fu_452_p3 = m_reg_320.read().range(5, 5);
}

void polyphase_filter::thread_tmp_6_fu_465_p2() {
    tmp_6_fu_465_p2 = (!idx_fu_460_p2.read().is_01() || !ap_const_lv8_18.is_01())? sc_lv<1>(): (sc_biguint<8>(idx_fu_460_p2.read()) < sc_biguint<8>(ap_const_lv8_18));
}

void polyphase_filter::thread_tmp_7_fu_471_p1() {
    tmp_7_fu_471_p1 = esl_zext<64,8>(idx_fu_460_p2.read());
}

void polyphase_filter::thread_tmp_9_fu_397_p2() {
    tmp_9_fu_397_p2 = (!tmp_8_reg_297.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_8_reg_297.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void polyphase_filter::thread_tmp_fu_415_p3() {
    tmp_fu_415_p3 = p_reg_308.read().range(3, 3);
}

void polyphase_filter::thread_tmp_s_fu_403_p1() {
    tmp_s_fu_403_p1 = esl_zext<64,5>(tmp_8_reg_297.read());
}

void polyphase_filter::thread_tmpidx_fu_546_p2() {
    tmpidx_fu_546_p2 = (!tmp_20_fu_542_p1.read().is_01() || !shift_reg_783.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_20_fu_542_p1.read()) - sc_biguint<5>(shift_reg_783.read()));
}

void polyphase_filter::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, ifft_config_data_V_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_fu_409_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_415_p3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op66_read_state4.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_452_p3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_452_p3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op66_read_state4.read())))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_530_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(filter_out_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state18;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<19>) ("XXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

