// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _be_HH_
#define _be_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct be : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<64> > ifft_out_dout;
    sc_in< sc_logic > ifft_out_empty_n;
    sc_out< sc_logic > ifft_out_read;
    sc_out< sc_lv<64> > out_r_TDATA;
    sc_out< sc_logic > out_r_TVALID;
    sc_in< sc_logic > out_r_TREADY;
    sc_out< sc_lv<1> > out_r_TLAST;
    sc_in< sc_lv<8> > ifft_status_data_V_dout;
    sc_in< sc_logic > ifft_status_data_V_empty_n;
    sc_out< sc_logic > ifft_status_data_V_read;
    sc_out< sc_lv<8> > ovflow_TDATA;
    sc_out< sc_logic > ovflow_TVALID;
    sc_in< sc_logic > ovflow_TREADY;


    // Module declarations
    be(sc_module_name name);
    SC_HAS_PROCESS(be);

    ~be();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<64> > out_data_1_data_out;
    sc_signal< sc_logic > out_data_1_vld_in;
    sc_signal< sc_logic > out_data_1_vld_out;
    sc_signal< sc_logic > out_data_1_ack_in;
    sc_signal< sc_logic > out_data_1_ack_out;
    sc_signal< sc_lv<64> > out_data_1_payload_A;
    sc_signal< sc_lv<64> > out_data_1_payload_B;
    sc_signal< sc_logic > out_data_1_sel_rd;
    sc_signal< sc_logic > out_data_1_sel_wr;
    sc_signal< sc_logic > out_data_1_sel;
    sc_signal< sc_logic > out_data_1_load_A;
    sc_signal< sc_logic > out_data_1_load_B;
    sc_signal< sc_lv<2> > out_data_1_state;
    sc_signal< sc_logic > out_data_1_state_cmp_full;
    sc_signal< sc_lv<1> > out_last_V_1_data_out;
    sc_signal< sc_logic > out_last_V_1_vld_in;
    sc_signal< sc_logic > out_last_V_1_vld_out;
    sc_signal< sc_logic > out_last_V_1_ack_in;
    sc_signal< sc_logic > out_last_V_1_ack_out;
    sc_signal< sc_lv<1> > out_last_V_1_payload_A;
    sc_signal< sc_lv<1> > out_last_V_1_payload_B;
    sc_signal< sc_logic > out_last_V_1_sel_rd;
    sc_signal< sc_logic > out_last_V_1_sel_wr;
    sc_signal< sc_logic > out_last_V_1_sel;
    sc_signal< sc_logic > out_last_V_1_load_A;
    sc_signal< sc_logic > out_last_V_1_load_B;
    sc_signal< sc_lv<2> > out_last_V_1_state;
    sc_signal< sc_logic > out_last_V_1_state_cmp_full;
    sc_signal< sc_lv<8> > ovflow_1_data_out;
    sc_signal< sc_logic > ovflow_1_vld_in;
    sc_signal< sc_logic > ovflow_1_vld_out;
    sc_signal< sc_logic > ovflow_1_ack_in;
    sc_signal< sc_logic > ovflow_1_ack_out;
    sc_signal< sc_lv<8> > ovflow_1_payload_A;
    sc_signal< sc_lv<8> > ovflow_1_payload_B;
    sc_signal< sc_logic > ovflow_1_sel_rd;
    sc_signal< sc_logic > ovflow_1_sel_wr;
    sc_signal< sc_logic > ovflow_1_sel;
    sc_signal< sc_logic > ovflow_1_load_A;
    sc_signal< sc_logic > ovflow_1_load_B;
    sc_signal< sc_lv<2> > ovflow_1_state;
    sc_signal< sc_logic > ovflow_1_state_cmp_full;
    sc_signal< sc_logic > ifft_out_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond_fu_115_p2;
    sc_signal< sc_logic > out_r_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ifft_status_data_V_blk_n;
    sc_signal< sc_logic > ovflow_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<6> > i_2_fu_121_p2;
    sc_signal< sc_lv<6> > i_2_reg_146;
    sc_signal< bool > ap_block_state2;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< sc_lv<1> > tmp_s_fu_127_p2;
    sc_signal< sc_lv<8> > tmp_fu_138_p1;
    sc_signal< sc_lv<6> > i_reg_104;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > tmp_22_fu_134_p1;
    sc_signal< bool > ap_block_state4;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<6> ap_const_lv6_1F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_state1();
    void thread_ap_block_state2();
    void thread_ap_block_state2_io();
    void thread_ap_block_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond_fu_115_p2();
    void thread_i_2_fu_121_p2();
    void thread_ifft_out_blk_n();
    void thread_ifft_out_read();
    void thread_ifft_status_data_V_blk_n();
    void thread_ifft_status_data_V_read();
    void thread_out_data_1_ack_in();
    void thread_out_data_1_ack_out();
    void thread_out_data_1_data_out();
    void thread_out_data_1_load_A();
    void thread_out_data_1_load_B();
    void thread_out_data_1_sel();
    void thread_out_data_1_state_cmp_full();
    void thread_out_data_1_vld_in();
    void thread_out_data_1_vld_out();
    void thread_out_last_V_1_ack_in();
    void thread_out_last_V_1_ack_out();
    void thread_out_last_V_1_data_out();
    void thread_out_last_V_1_load_A();
    void thread_out_last_V_1_load_B();
    void thread_out_last_V_1_sel();
    void thread_out_last_V_1_state_cmp_full();
    void thread_out_last_V_1_vld_in();
    void thread_out_last_V_1_vld_out();
    void thread_out_r_TDATA();
    void thread_out_r_TDATA_blk_n();
    void thread_out_r_TLAST();
    void thread_out_r_TVALID();
    void thread_ovflow_1_ack_in();
    void thread_ovflow_1_ack_out();
    void thread_ovflow_1_data_out();
    void thread_ovflow_1_load_A();
    void thread_ovflow_1_load_B();
    void thread_ovflow_1_sel();
    void thread_ovflow_1_state_cmp_full();
    void thread_ovflow_1_vld_in();
    void thread_ovflow_1_vld_out();
    void thread_ovflow_TDATA();
    void thread_ovflow_TDATA_blk_n();
    void thread_ovflow_TVALID();
    void thread_tmp_22_fu_134_p1();
    void thread_tmp_fu_138_p1();
    void thread_tmp_s_fu_127_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
