// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _os_pfb_HH_
#define _os_pfb_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "polyphase_filter.h"
#include "fft_os_pfb_config_s.h"
#include "be.h"
#include "fifo_w64_d1_A.h"
#include "fifo_w8_d1_A.h"
#include "start_for_fft_os_jbC.h"
#include "start_for_be_U0.h"

namespace ap_rtl {

struct os_pfb : public sc_module {
    // Port declarations 12
    sc_in< sc_lv<64> > in_r_TDATA;
    sc_out< sc_lv<64> > out_r_TDATA;
    sc_out< sc_lv<1> > out_r_TLAST;
    sc_out< sc_lv<8> > ovflow_TDATA;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > in_r_TVALID;
    sc_out< sc_logic > in_r_TREADY;
    sc_out< sc_logic > out_r_TVALID;
    sc_in< sc_logic > out_r_TREADY;
    sc_out< sc_logic > ovflow_TVALID;
    sc_in< sc_logic > ovflow_TREADY;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    os_pfb(sc_module_name name);
    SC_HAS_PROCESS(os_pfb);

    ~os_pfb();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    polyphase_filter* polyphase_filter_U0;
    fft_os_pfb_config_s* fft_os_pfb_config_U0;
    be* be_U0;
    fifo_w64_d1_A* filter_out_channel_U;
    fifo_w8_d1_A* ifft_config_data_V_U;
    fifo_w64_d1_A* ifft_out_channel_U;
    fifo_w8_d1_A* ifft_status_data_V_U;
    start_for_fft_os_jbC* start_for_fft_os_jbC_U;
    start_for_be_U0* start_for_be_U0_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > polyphase_filter_U0_ap_start;
    sc_signal< sc_logic > polyphase_filter_U0_start_full_n;
    sc_signal< sc_logic > polyphase_filter_U0_ap_done;
    sc_signal< sc_logic > polyphase_filter_U0_ap_continue;
    sc_signal< sc_logic > polyphase_filter_U0_ap_idle;
    sc_signal< sc_logic > polyphase_filter_U0_ap_ready;
    sc_signal< sc_logic > polyphase_filter_U0_start_out;
    sc_signal< sc_logic > polyphase_filter_U0_start_write;
    sc_signal< sc_logic > polyphase_filter_U0_in_r_TREADY;
    sc_signal< sc_lv<64> > polyphase_filter_U0_filter_out_din;
    sc_signal< sc_logic > polyphase_filter_U0_filter_out_write;
    sc_signal< sc_lv<8> > polyphase_filter_U0_ifft_config_data_V_din;
    sc_signal< sc_logic > polyphase_filter_U0_ifft_config_data_V_write;
    sc_signal< sc_logic > fft_os_pfb_config_U0_ap_start;
    sc_signal< sc_logic > fft_os_pfb_config_U0_ap_done;
    sc_signal< sc_logic > fft_os_pfb_config_U0_ap_idle;
    sc_signal< sc_logic > fft_os_pfb_config_U0_ap_ready;
    sc_signal< sc_logic > fft_os_pfb_config_U0_ap_continue;
    sc_signal< sc_logic > fft_os_pfb_config_U0_xn_read;
    sc_signal< sc_lv<64> > fft_os_pfb_config_U0_xk_din;
    sc_signal< sc_logic > fft_os_pfb_config_U0_xk_write;
    sc_signal< sc_lv<8> > fft_os_pfb_config_U0_status_data_V_din;
    sc_signal< sc_logic > fft_os_pfb_config_U0_status_data_V_write;
    sc_signal< sc_logic > fft_os_pfb_config_U0_config_ch_data_V_read;
    sc_signal< sc_logic > be_U0_ap_start;
    sc_signal< sc_logic > be_U0_ap_done;
    sc_signal< sc_logic > be_U0_ap_continue;
    sc_signal< sc_logic > be_U0_ap_idle;
    sc_signal< sc_logic > be_U0_ap_ready;
    sc_signal< sc_logic > be_U0_ifft_out_read;
    sc_signal< sc_lv<64> > be_U0_out_r_TDATA;
    sc_signal< sc_logic > be_U0_out_r_TVALID;
    sc_signal< sc_lv<1> > be_U0_out_r_TLAST;
    sc_signal< sc_logic > be_U0_ifft_status_data_V_read;
    sc_signal< sc_lv<8> > be_U0_ovflow_TDATA;
    sc_signal< sc_logic > be_U0_ovflow_TVALID;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > filter_out_channel_full_n;
    sc_signal< sc_lv<64> > filter_out_channel_dout;
    sc_signal< sc_logic > filter_out_channel_empty_n;
    sc_signal< sc_logic > ifft_config_data_V_full_n;
    sc_signal< sc_lv<8> > ifft_config_data_V_dout;
    sc_signal< sc_logic > ifft_config_data_V_empty_n;
    sc_signal< sc_logic > ifft_out_channel_full_n;
    sc_signal< sc_lv<64> > ifft_out_channel_dout;
    sc_signal< sc_logic > ifft_out_channel_empty_n;
    sc_signal< sc_logic > ifft_status_data_V_full_n;
    sc_signal< sc_lv<8> > ifft_status_data_V_dout;
    sc_signal< sc_logic > ifft_status_data_V_empty_n;
    sc_signal< sc_lv<1> > start_for_fft_os_pfb_config_U0_din;
    sc_signal< sc_logic > start_for_fft_os_pfb_config_U0_full_n;
    sc_signal< sc_lv<1> > start_for_fft_os_pfb_config_U0_dout;
    sc_signal< sc_logic > start_for_fft_os_pfb_config_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_be_U0_din;
    sc_signal< sc_logic > start_for_be_U0_full_n;
    sc_signal< sc_lv<1> > start_for_be_U0_dout;
    sc_signal< sc_logic > start_for_be_U0_empty_n;
    sc_signal< sc_logic > fft_os_pfb_config_U0_start_full_n;
    sc_signal< sc_logic > fft_os_pfb_config_U0_start_write;
    sc_signal< sc_logic > be_U0_start_full_n;
    sc_signal< sc_logic > be_U0_start_write;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_be_U0_ap_continue();
    void thread_be_U0_ap_start();
    void thread_be_U0_start_full_n();
    void thread_be_U0_start_write();
    void thread_fft_os_pfb_config_U0_ap_continue();
    void thread_fft_os_pfb_config_U0_ap_start();
    void thread_fft_os_pfb_config_U0_start_full_n();
    void thread_fft_os_pfb_config_U0_start_write();
    void thread_in_r_TREADY();
    void thread_out_r_TDATA();
    void thread_out_r_TLAST();
    void thread_out_r_TVALID();
    void thread_ovflow_TDATA();
    void thread_ovflow_TVALID();
    void thread_polyphase_filter_U0_ap_continue();
    void thread_polyphase_filter_U0_ap_start();
    void thread_polyphase_filter_U0_start_full_n();
    void thread_start_for_be_U0_din();
    void thread_start_for_fft_os_pfb_config_U0_din();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
