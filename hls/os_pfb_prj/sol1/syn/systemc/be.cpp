// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "be.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic be::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic be::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> be::ap_ST_fsm_state1 = "1";
const sc_lv<4> be::ap_ST_fsm_state2 = "10";
const sc_lv<4> be::ap_ST_fsm_state3 = "100";
const sc_lv<4> be::ap_ST_fsm_state4 = "1000";
const sc_lv<32> be::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool be::ap_const_boolean_1 = true;
const sc_lv<1> be::ap_const_lv1_0 = "0";
const sc_lv<1> be::ap_const_lv1_1 = "1";
const sc_lv<2> be::ap_const_lv2_0 = "00";
const sc_lv<2> be::ap_const_lv2_2 = "10";
const sc_lv<2> be::ap_const_lv2_3 = "11";
const sc_lv<2> be::ap_const_lv2_1 = "1";
const sc_lv<32> be::ap_const_lv32_1 = "1";
const sc_lv<32> be::ap_const_lv32_2 = "10";
const sc_lv<32> be::ap_const_lv32_3 = "11";
const sc_lv<6> be::ap_const_lv6_0 = "000000";
const sc_lv<6> be::ap_const_lv6_20 = "100000";
const sc_lv<6> be::ap_const_lv6_1 = "1";
const sc_lv<6> be::ap_const_lv6_1F = "11111";

be::be(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( ifft_out_empty_n );
    sensitive << ( ifft_status_data_V_empty_n );
    sensitive << ( exitcond_fu_115_p2 );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( out_data_1_ack_in );
    sensitive << ( ovflow_1_ack_in );
    sensitive << ( exitcond_fu_115_p2 );

    SC_METHOD(thread_ap_block_state4);
    sensitive << ( out_data_1_ack_in );
    sensitive << ( out_last_V_1_ack_in );
    sensitive << ( ovflow_1_ack_in );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( out_data_1_ack_in );
    sensitive << ( out_last_V_1_ack_in );
    sensitive << ( ovflow_1_ack_in );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( out_data_1_ack_in );
    sensitive << ( out_last_V_1_ack_in );
    sensitive << ( ovflow_1_ack_in );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_exitcond_fu_115_p2);
    sensitive << ( ifft_out_empty_n );
    sensitive << ( ifft_status_data_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_115_p2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( i_reg_104 );

    SC_METHOD(thread_i_2_fu_121_p2);
    sensitive << ( i_reg_104 );

    SC_METHOD(thread_ifft_out_blk_n);
    sensitive << ( ifft_out_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_115_p2 );

    SC_METHOD(thread_ifft_out_read);
    sensitive << ( ifft_out_empty_n );
    sensitive << ( ifft_status_data_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_115_p2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_ifft_status_data_V_blk_n);
    sensitive << ( ifft_status_data_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_115_p2 );

    SC_METHOD(thread_ifft_status_data_V_read);
    sensitive << ( ifft_out_empty_n );
    sensitive << ( ifft_status_data_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_115_p2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_out_data_1_ack_in);
    sensitive << ( out_data_1_state );

    SC_METHOD(thread_out_data_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_data_1_data_out);
    sensitive << ( out_data_1_payload_A );
    sensitive << ( out_data_1_payload_B );
    sensitive << ( out_data_1_sel );

    SC_METHOD(thread_out_data_1_load_A);
    sensitive << ( out_data_1_sel_wr );
    sensitive << ( out_data_1_state_cmp_full );

    SC_METHOD(thread_out_data_1_load_B);
    sensitive << ( out_data_1_sel_wr );
    sensitive << ( out_data_1_state_cmp_full );

    SC_METHOD(thread_out_data_1_sel);
    sensitive << ( out_data_1_sel_rd );

    SC_METHOD(thread_out_data_1_state_cmp_full);
    sensitive << ( out_data_1_state );

    SC_METHOD(thread_out_data_1_vld_in);
    sensitive << ( ifft_out_empty_n );
    sensitive << ( ifft_status_data_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_115_p2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_out_data_1_vld_out);
    sensitive << ( out_data_1_state );

    SC_METHOD(thread_out_last_V_1_ack_in);
    sensitive << ( out_last_V_1_state );

    SC_METHOD(thread_out_last_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_last_V_1_data_out);
    sensitive << ( out_last_V_1_payload_A );
    sensitive << ( out_last_V_1_payload_B );
    sensitive << ( out_last_V_1_sel );

    SC_METHOD(thread_out_last_V_1_load_A);
    sensitive << ( out_last_V_1_sel_wr );
    sensitive << ( out_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_last_V_1_load_B);
    sensitive << ( out_last_V_1_sel_wr );
    sensitive << ( out_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_last_V_1_sel);
    sensitive << ( out_last_V_1_sel_rd );

    SC_METHOD(thread_out_last_V_1_state_cmp_full);
    sensitive << ( out_last_V_1_state );

    SC_METHOD(thread_out_last_V_1_vld_in);
    sensitive << ( ifft_out_empty_n );
    sensitive << ( ifft_status_data_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_115_p2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_out_last_V_1_vld_out);
    sensitive << ( out_last_V_1_state );

    SC_METHOD(thread_out_r_TDATA);
    sensitive << ( out_data_1_data_out );

    SC_METHOD(thread_out_r_TDATA_blk_n);
    sensitive << ( out_data_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_115_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_r_TLAST);
    sensitive << ( out_last_V_1_data_out );

    SC_METHOD(thread_out_r_TVALID);
    sensitive << ( out_last_V_1_state );

    SC_METHOD(thread_ovflow_1_ack_in);
    sensitive << ( ovflow_1_state );

    SC_METHOD(thread_ovflow_1_ack_out);
    sensitive << ( ovflow_TREADY );

    SC_METHOD(thread_ovflow_1_data_out);
    sensitive << ( ovflow_1_payload_A );
    sensitive << ( ovflow_1_payload_B );
    sensitive << ( ovflow_1_sel );

    SC_METHOD(thread_ovflow_1_load_A);
    sensitive << ( ovflow_1_sel_wr );
    sensitive << ( ovflow_1_state_cmp_full );

    SC_METHOD(thread_ovflow_1_load_B);
    sensitive << ( ovflow_1_sel_wr );
    sensitive << ( ovflow_1_state_cmp_full );

    SC_METHOD(thread_ovflow_1_sel);
    sensitive << ( ovflow_1_sel_rd );

    SC_METHOD(thread_ovflow_1_state_cmp_full);
    sensitive << ( ovflow_1_state );

    SC_METHOD(thread_ovflow_1_vld_in);
    sensitive << ( ifft_out_empty_n );
    sensitive << ( ifft_status_data_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_115_p2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_ovflow_1_vld_out);
    sensitive << ( ovflow_1_state );

    SC_METHOD(thread_ovflow_TDATA);
    sensitive << ( ovflow_1_data_out );

    SC_METHOD(thread_ovflow_TDATA_blk_n);
    sensitive << ( ovflow_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_115_p2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ovflow_TVALID);
    sensitive << ( ovflow_1_state );

    SC_METHOD(thread_tmp_22_fu_134_p1);
    sensitive << ( ifft_status_data_V_dout );

    SC_METHOD(thread_tmp_fu_138_p1);
    sensitive << ( tmp_22_fu_134_p1 );

    SC_METHOD(thread_tmp_s_fu_127_p2);
    sensitive << ( ifft_out_empty_n );
    sensitive << ( ifft_status_data_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_115_p2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( i_reg_104 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ifft_out_empty_n );
    sensitive << ( out_data_1_ack_in );
    sensitive << ( out_last_V_1_ack_in );
    sensitive << ( ifft_status_data_V_empty_n );
    sensitive << ( ovflow_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_115_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_state2_io );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    out_data_1_sel_rd = SC_LOGIC_0;
    out_data_1_sel_wr = SC_LOGIC_0;
    out_data_1_state = "00";
    out_last_V_1_sel_rd = SC_LOGIC_0;
    out_last_V_1_sel_wr = SC_LOGIC_0;
    out_last_V_1_state = "00";
    ovflow_1_sel_rd = SC_LOGIC_0;
    ovflow_1_sel_wr = SC_LOGIC_0;
    ovflow_1_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "be_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ifft_out_dout, "(port)ifft_out_dout");
    sc_trace(mVcdFile, ifft_out_empty_n, "(port)ifft_out_empty_n");
    sc_trace(mVcdFile, ifft_out_read, "(port)ifft_out_read");
    sc_trace(mVcdFile, out_r_TDATA, "(port)out_r_TDATA");
    sc_trace(mVcdFile, out_r_TVALID, "(port)out_r_TVALID");
    sc_trace(mVcdFile, out_r_TREADY, "(port)out_r_TREADY");
    sc_trace(mVcdFile, out_r_TLAST, "(port)out_r_TLAST");
    sc_trace(mVcdFile, ifft_status_data_V_dout, "(port)ifft_status_data_V_dout");
    sc_trace(mVcdFile, ifft_status_data_V_empty_n, "(port)ifft_status_data_V_empty_n");
    sc_trace(mVcdFile, ifft_status_data_V_read, "(port)ifft_status_data_V_read");
    sc_trace(mVcdFile, ovflow_TDATA, "(port)ovflow_TDATA");
    sc_trace(mVcdFile, ovflow_TVALID, "(port)ovflow_TVALID");
    sc_trace(mVcdFile, ovflow_TREADY, "(port)ovflow_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, out_data_1_data_out, "out_data_1_data_out");
    sc_trace(mVcdFile, out_data_1_vld_in, "out_data_1_vld_in");
    sc_trace(mVcdFile, out_data_1_vld_out, "out_data_1_vld_out");
    sc_trace(mVcdFile, out_data_1_ack_in, "out_data_1_ack_in");
    sc_trace(mVcdFile, out_data_1_ack_out, "out_data_1_ack_out");
    sc_trace(mVcdFile, out_data_1_payload_A, "out_data_1_payload_A");
    sc_trace(mVcdFile, out_data_1_payload_B, "out_data_1_payload_B");
    sc_trace(mVcdFile, out_data_1_sel_rd, "out_data_1_sel_rd");
    sc_trace(mVcdFile, out_data_1_sel_wr, "out_data_1_sel_wr");
    sc_trace(mVcdFile, out_data_1_sel, "out_data_1_sel");
    sc_trace(mVcdFile, out_data_1_load_A, "out_data_1_load_A");
    sc_trace(mVcdFile, out_data_1_load_B, "out_data_1_load_B");
    sc_trace(mVcdFile, out_data_1_state, "out_data_1_state");
    sc_trace(mVcdFile, out_data_1_state_cmp_full, "out_data_1_state_cmp_full");
    sc_trace(mVcdFile, out_last_V_1_data_out, "out_last_V_1_data_out");
    sc_trace(mVcdFile, out_last_V_1_vld_in, "out_last_V_1_vld_in");
    sc_trace(mVcdFile, out_last_V_1_vld_out, "out_last_V_1_vld_out");
    sc_trace(mVcdFile, out_last_V_1_ack_in, "out_last_V_1_ack_in");
    sc_trace(mVcdFile, out_last_V_1_ack_out, "out_last_V_1_ack_out");
    sc_trace(mVcdFile, out_last_V_1_payload_A, "out_last_V_1_payload_A");
    sc_trace(mVcdFile, out_last_V_1_payload_B, "out_last_V_1_payload_B");
    sc_trace(mVcdFile, out_last_V_1_sel_rd, "out_last_V_1_sel_rd");
    sc_trace(mVcdFile, out_last_V_1_sel_wr, "out_last_V_1_sel_wr");
    sc_trace(mVcdFile, out_last_V_1_sel, "out_last_V_1_sel");
    sc_trace(mVcdFile, out_last_V_1_load_A, "out_last_V_1_load_A");
    sc_trace(mVcdFile, out_last_V_1_load_B, "out_last_V_1_load_B");
    sc_trace(mVcdFile, out_last_V_1_state, "out_last_V_1_state");
    sc_trace(mVcdFile, out_last_V_1_state_cmp_full, "out_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, ovflow_1_data_out, "ovflow_1_data_out");
    sc_trace(mVcdFile, ovflow_1_vld_in, "ovflow_1_vld_in");
    sc_trace(mVcdFile, ovflow_1_vld_out, "ovflow_1_vld_out");
    sc_trace(mVcdFile, ovflow_1_ack_in, "ovflow_1_ack_in");
    sc_trace(mVcdFile, ovflow_1_ack_out, "ovflow_1_ack_out");
    sc_trace(mVcdFile, ovflow_1_payload_A, "ovflow_1_payload_A");
    sc_trace(mVcdFile, ovflow_1_payload_B, "ovflow_1_payload_B");
    sc_trace(mVcdFile, ovflow_1_sel_rd, "ovflow_1_sel_rd");
    sc_trace(mVcdFile, ovflow_1_sel_wr, "ovflow_1_sel_wr");
    sc_trace(mVcdFile, ovflow_1_sel, "ovflow_1_sel");
    sc_trace(mVcdFile, ovflow_1_load_A, "ovflow_1_load_A");
    sc_trace(mVcdFile, ovflow_1_load_B, "ovflow_1_load_B");
    sc_trace(mVcdFile, ovflow_1_state, "ovflow_1_state");
    sc_trace(mVcdFile, ovflow_1_state_cmp_full, "ovflow_1_state_cmp_full");
    sc_trace(mVcdFile, ifft_out_blk_n, "ifft_out_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_fu_115_p2, "exitcond_fu_115_p2");
    sc_trace(mVcdFile, out_r_TDATA_blk_n, "out_r_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ifft_status_data_V_blk_n, "ifft_status_data_V_blk_n");
    sc_trace(mVcdFile, ovflow_TDATA_blk_n, "ovflow_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_2_fu_121_p2, "i_2_fu_121_p2");
    sc_trace(mVcdFile, i_2_reg_146, "i_2_reg_146");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, tmp_s_fu_127_p2, "tmp_s_fu_127_p2");
    sc_trace(mVcdFile, tmp_fu_138_p1, "tmp_fu_138_p1");
    sc_trace(mVcdFile, i_reg_104, "i_reg_104");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_22_fu_134_p1, "tmp_22_fu_134_p1");
    sc_trace(mVcdFile, ap_block_state4, "ap_block_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

be::~be() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void be::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, out_data_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ovflow_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_ack_in.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(out_data_1_ack_in.read(), ap_const_logic_1))) {
        i_reg_104 = i_2_reg_146.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_reg_104 = ap_const_lv6_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_data_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_data_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_data_1_vld_out.read()))) {
            out_data_1_sel_rd =  (sc_logic) (~out_data_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_data_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_data_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_data_1_ack_in.read()))) {
            out_data_1_sel_wr =  (sc_logic) (~out_data_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_data_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_data_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_data_1_ack_out.read()) && 
              esl_seteq<1,2,2>(out_data_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_data_1_vld_in.read()) && 
              esl_seteq<1,2,2>(out_data_1_state.read(), ap_const_lv2_2)))) {
            out_data_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_data_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_data_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_data_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_data_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_data_1_state.read(), ap_const_lv2_1)))) {
            out_data_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_data_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(out_data_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_data_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_data_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(out_data_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_data_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_data_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_data_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_data_1_ack_out.read()))))) {
            out_data_1_state = ap_const_lv2_3;
        } else {
            out_data_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_vld_out.read()))) {
            out_last_V_1_sel_rd =  (sc_logic) (~out_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_ack_in.read()))) {
            out_last_V_1_sel_wr =  (sc_logic) (~out_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_last_V_1_state.read())))) {
            out_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_last_V_1_state.read())))) {
            out_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_ack_out.read()))))) {
            out_last_V_1_state = ap_const_lv2_3;
        } else {
            out_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ovflow_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ovflow_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ovflow_1_vld_out.read()))) {
            ovflow_1_sel_rd =  (sc_logic) (~ovflow_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ovflow_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ovflow_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ovflow_1_ack_in.read()))) {
            ovflow_1_sel_wr =  (sc_logic) (~ovflow_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ovflow_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, ovflow_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ovflow_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, ovflow_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, ovflow_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, ovflow_1_state.read())))) {
            ovflow_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ovflow_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, ovflow_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, ovflow_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, ovflow_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, ovflow_1_state.read())))) {
            ovflow_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ovflow_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, ovflow_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ovflow_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, ovflow_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, ovflow_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, ovflow_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ovflow_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, ovflow_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ovflow_1_ack_out.read()))))) {
            ovflow_1_state = ap_const_lv2_3;
        } else {
            ovflow_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_115_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ifft_out_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_115_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ifft_status_data_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        i_2_reg_146 = i_2_fu_121_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_1_load_A.read())) {
        out_data_1_payload_A = ifft_out_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_1_load_B.read())) {
        out_data_1_payload_B = ifft_out_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_load_A.read())) {
        out_last_V_1_payload_A = tmp_s_fu_127_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_load_B.read())) {
        out_last_V_1_payload_B = tmp_s_fu_127_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ovflow_1_load_A.read())) {
        ovflow_1_payload_A = tmp_fu_138_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ovflow_1_load_B.read())) {
        ovflow_1_payload_B = tmp_fu_138_p1.read();
    }
}

void be::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void be::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void be::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void be::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void be::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void be::thread_ap_block_state2() {
    ap_block_state2 = ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_115_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ifft_out_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_115_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ifft_status_data_V_empty_n.read())));
}

void be::thread_ap_block_state2_io() {
    ap_block_state2_io = ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_115_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_data_1_ack_in.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_115_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ovflow_1_ack_in.read())));
}

void be::thread_ap_block_state4() {
    ap_block_state4 = (esl_seteq<1,1,1>(ap_const_logic_0, out_data_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ovflow_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_ack_in.read()));
}

void be::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_data_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ovflow_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_ack_in.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void be::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void be::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_data_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ovflow_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_ack_in.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void be::thread_exitcond_fu_115_p2() {
    exitcond_fu_115_p2 = (!i_reg_104.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_104.read() == ap_const_lv6_20);
}

void be::thread_i_2_fu_121_p2() {
    i_2_fu_121_p2 = (!i_reg_104.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_reg_104.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void be::thread_ifft_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_115_p2.read()))) {
        ifft_out_blk_n = ifft_out_empty_n.read();
    } else {
        ifft_out_blk_n = ap_const_logic_1;
    }
}

void be::thread_ifft_out_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_115_p2.read()) && 
         !((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_115_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ifft_out_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_115_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ifft_status_data_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        ifft_out_read = ap_const_logic_1;
    } else {
        ifft_out_read = ap_const_logic_0;
    }
}

void be::thread_ifft_status_data_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_115_p2.read()))) {
        ifft_status_data_V_blk_n = ifft_status_data_V_empty_n.read();
    } else {
        ifft_status_data_V_blk_n = ap_const_logic_1;
    }
}

void be::thread_ifft_status_data_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_115_p2.read()) && 
         !((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_115_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ifft_out_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_115_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ifft_status_data_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        ifft_status_data_V_read = ap_const_logic_1;
    } else {
        ifft_status_data_V_read = ap_const_logic_0;
    }
}

void be::thread_out_data_1_ack_in() {
    out_data_1_ack_in = out_data_1_state.read()[1];
}

void be::thread_out_data_1_ack_out() {
    out_data_1_ack_out = out_r_TREADY.read();
}

void be::thread_out_data_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_1_sel.read())) {
        out_data_1_data_out = out_data_1_payload_B.read();
    } else {
        out_data_1_data_out = out_data_1_payload_A.read();
    }
}

void be::thread_out_data_1_load_A() {
    out_data_1_load_A = (out_data_1_state_cmp_full.read() & ~out_data_1_sel_wr.read());
}

void be::thread_out_data_1_load_B() {
    out_data_1_load_B = (out_data_1_sel_wr.read() & out_data_1_state_cmp_full.read());
}

void be::thread_out_data_1_sel() {
    out_data_1_sel = out_data_1_sel_rd.read();
}

void be::thread_out_data_1_state_cmp_full() {
    out_data_1_state_cmp_full =  (sc_logic) ((!out_data_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_data_1_state.read() != ap_const_lv2_1))[0];
}

void be::thread_out_data_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_115_p2.read()) && 
         !((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_115_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ifft_out_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_115_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ifft_status_data_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        out_data_1_vld_in = ap_const_logic_1;
    } else {
        out_data_1_vld_in = ap_const_logic_0;
    }
}

void be::thread_out_data_1_vld_out() {
    out_data_1_vld_out = out_data_1_state.read()[0];
}

void be::thread_out_last_V_1_ack_in() {
    out_last_V_1_ack_in = out_last_V_1_state.read()[1];
}

void be::thread_out_last_V_1_ack_out() {
    out_last_V_1_ack_out = out_r_TREADY.read();
}

void be::thread_out_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_sel.read())) {
        out_last_V_1_data_out = out_last_V_1_payload_B.read();
    } else {
        out_last_V_1_data_out = out_last_V_1_payload_A.read();
    }
}

void be::thread_out_last_V_1_load_A() {
    out_last_V_1_load_A = (out_last_V_1_state_cmp_full.read() & ~out_last_V_1_sel_wr.read());
}

void be::thread_out_last_V_1_load_B() {
    out_last_V_1_load_B = (out_last_V_1_sel_wr.read() & out_last_V_1_state_cmp_full.read());
}

void be::thread_out_last_V_1_sel() {
    out_last_V_1_sel = out_last_V_1_sel_rd.read();
}

void be::thread_out_last_V_1_state_cmp_full() {
    out_last_V_1_state_cmp_full =  (sc_logic) ((!out_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void be::thread_out_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_115_p2.read()) && 
         !((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_115_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ifft_out_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_115_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ifft_status_data_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        out_last_V_1_vld_in = ap_const_logic_1;
    } else {
        out_last_V_1_vld_in = ap_const_logic_0;
    }
}

void be::thread_out_last_V_1_vld_out() {
    out_last_V_1_vld_out = out_last_V_1_state.read()[0];
}

void be::thread_out_r_TDATA() {
    out_r_TDATA = out_data_1_data_out.read();
}

void be::thread_out_r_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_115_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        out_r_TDATA_blk_n = out_data_1_state.read()[1];
    } else {
        out_r_TDATA_blk_n = ap_const_logic_1;
    }
}

void be::thread_out_r_TLAST() {
    out_r_TLAST = out_last_V_1_data_out.read();
}

void be::thread_out_r_TVALID() {
    out_r_TVALID = out_last_V_1_state.read()[0];
}

void be::thread_ovflow_1_ack_in() {
    ovflow_1_ack_in = ovflow_1_state.read()[1];
}

void be::thread_ovflow_1_ack_out() {
    ovflow_1_ack_out = ovflow_TREADY.read();
}

void be::thread_ovflow_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ovflow_1_sel.read())) {
        ovflow_1_data_out = ovflow_1_payload_B.read();
    } else {
        ovflow_1_data_out = ovflow_1_payload_A.read();
    }
}

void be::thread_ovflow_1_load_A() {
    ovflow_1_load_A = (ovflow_1_state_cmp_full.read() & ~ovflow_1_sel_wr.read());
}

void be::thread_ovflow_1_load_B() {
    ovflow_1_load_B = (ovflow_1_sel_wr.read() & ovflow_1_state_cmp_full.read());
}

void be::thread_ovflow_1_sel() {
    ovflow_1_sel = ovflow_1_sel_rd.read();
}

void be::thread_ovflow_1_state_cmp_full() {
    ovflow_1_state_cmp_full =  (sc_logic) ((!ovflow_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(ovflow_1_state.read() != ap_const_lv2_1))[0];
}

void be::thread_ovflow_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_115_p2.read()) && 
         !((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_115_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ifft_out_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_115_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ifft_status_data_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        ovflow_1_vld_in = ap_const_logic_1;
    } else {
        ovflow_1_vld_in = ap_const_logic_0;
    }
}

void be::thread_ovflow_1_vld_out() {
    ovflow_1_vld_out = ovflow_1_state.read()[0];
}

void be::thread_ovflow_TDATA() {
    ovflow_TDATA = ovflow_1_data_out.read();
}

void be::thread_ovflow_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_115_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ovflow_TDATA_blk_n = ovflow_1_state.read()[1];
    } else {
        ovflow_TDATA_blk_n = ap_const_logic_1;
    }
}

void be::thread_ovflow_TVALID() {
    ovflow_TVALID = ovflow_1_state.read()[0];
}

void be::thread_tmp_22_fu_134_p1() {
    tmp_22_fu_134_p1 = ifft_status_data_V_dout.read().range(1-1, 0);
}

void be::thread_tmp_fu_138_p1() {
    tmp_fu_138_p1 = esl_zext<8,1>(tmp_22_fu_134_p1.read());
}

void be::thread_tmp_s_fu_127_p2() {
    tmp_s_fu_127_p2 = (!i_reg_104.read().is_01() || !ap_const_lv6_1F.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_104.read() == ap_const_lv6_1F);
}

void be::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_115_p2.read()) && !((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_115_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ifft_out_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_115_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ifft_status_data_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_115_p2.read()) && !((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_115_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ifft_out_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_115_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ifft_status_data_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(out_data_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, out_data_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ovflow_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

