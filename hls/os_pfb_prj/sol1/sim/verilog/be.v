// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module be (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ifft_out_dout,
        ifft_out_empty_n,
        ifft_out_read,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TLAST,
        ifft_status_data_V_dout,
        ifft_status_data_V_empty_n,
        ifft_status_data_V_read,
        ovflow_TDATA,
        ovflow_TVALID,
        ovflow_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] ifft_out_dout;
input   ifft_out_empty_n;
output   ifft_out_read;
output  [63:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [0:0] out_r_TLAST;
input  [7:0] ifft_status_data_V_dout;
input   ifft_status_data_V_empty_n;
output   ifft_status_data_V_read;
output  [7:0] ovflow_TDATA;
output   ovflow_TVALID;
input   ovflow_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ifft_out_read;
reg ifft_status_data_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] out_data_1_data_out;
reg    out_data_1_vld_in;
wire    out_data_1_vld_out;
wire    out_data_1_ack_in;
wire    out_data_1_ack_out;
reg   [63:0] out_data_1_payload_A;
reg   [63:0] out_data_1_payload_B;
reg    out_data_1_sel_rd;
reg    out_data_1_sel_wr;
wire    out_data_1_sel;
wire    out_data_1_load_A;
wire    out_data_1_load_B;
reg   [1:0] out_data_1_state;
wire    out_data_1_state_cmp_full;
reg   [0:0] out_last_V_1_data_out;
reg    out_last_V_1_vld_in;
wire    out_last_V_1_vld_out;
wire    out_last_V_1_ack_in;
wire    out_last_V_1_ack_out;
reg   [0:0] out_last_V_1_payload_A;
reg   [0:0] out_last_V_1_payload_B;
reg    out_last_V_1_sel_rd;
reg    out_last_V_1_sel_wr;
wire    out_last_V_1_sel;
wire    out_last_V_1_load_A;
wire    out_last_V_1_load_B;
reg   [1:0] out_last_V_1_state;
wire    out_last_V_1_state_cmp_full;
reg   [7:0] ovflow_1_data_out;
reg    ovflow_1_vld_in;
wire    ovflow_1_vld_out;
wire    ovflow_1_ack_in;
wire    ovflow_1_ack_out;
reg   [7:0] ovflow_1_payload_A;
reg   [7:0] ovflow_1_payload_B;
reg    ovflow_1_sel_rd;
reg    ovflow_1_sel_wr;
wire    ovflow_1_sel;
wire    ovflow_1_load_A;
wire    ovflow_1_load_B;
reg   [1:0] ovflow_1_state;
wire    ovflow_1_state_cmp_full;
reg    ifft_out_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_115_p2;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state3;
reg    ifft_status_data_V_blk_n;
reg    ovflow_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire   [5:0] i_2_fu_121_p2;
reg   [5:0] i_2_reg_146;
reg    ap_block_state2;
reg    ap_block_state2_io;
wire   [0:0] tmp_s_fu_127_p2;
wire   [7:0] tmp_fu_138_p1;
reg   [5:0] i_reg_104;
reg    ap_block_state1;
wire   [0:0] tmp_22_fu_134_p1;
reg    ap_block_state4;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 out_data_1_sel_rd = 1'b0;
#0 out_data_1_sel_wr = 1'b0;
#0 out_data_1_state = 2'd0;
#0 out_last_V_1_sel_rd = 1'b0;
#0 out_last_V_1_sel_wr = 1'b0;
#0 out_last_V_1_state = 2'd0;
#0 ovflow_1_sel_rd = 1'b0;
#0 ovflow_1_sel_wr = 1'b0;
#0 ovflow_1_state = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((out_data_1_ack_in == 1'b0) | (ovflow_1_ack_in == 1'b0) | (out_last_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_data_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_1_ack_out == 1'b1) & (out_data_1_vld_out == 1'b1))) begin
            out_data_1_sel_rd <= ~out_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_data_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_1_ack_in == 1'b1) & (out_data_1_vld_in == 1'b1))) begin
            out_data_1_sel_wr <= ~out_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_data_1_state <= 2'd0;
    end else begin
        if ((((out_data_1_state == 2'd2) & (out_data_1_vld_in == 1'b0)) | ((out_data_1_state == 2'd3) & (out_data_1_vld_in == 1'b0) & (out_data_1_ack_out == 1'b1)))) begin
            out_data_1_state <= 2'd2;
        end else if ((((out_data_1_state == 2'd1) & (out_data_1_ack_out == 1'b0)) | ((out_data_1_state == 2'd3) & (out_data_1_ack_out == 1'b0) & (out_data_1_vld_in == 1'b1)))) begin
            out_data_1_state <= 2'd1;
        end else if (((~((out_data_1_vld_in == 1'b0) & (out_data_1_ack_out == 1'b1)) & ~((out_data_1_ack_out == 1'b0) & (out_data_1_vld_in == 1'b1)) & (out_data_1_state == 2'd3)) | ((out_data_1_state == 2'd1) & (out_data_1_ack_out == 1'b1)) | ((out_data_1_state == 2'd2) & (out_data_1_vld_in == 1'b1)))) begin
            out_data_1_state <= 2'd3;
        end else begin
            out_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_last_V_1_ack_out == 1'b1) & (out_last_V_1_vld_out == 1'b1))) begin
            out_last_V_1_sel_rd <= ~out_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_last_V_1_ack_in == 1'b1) & (out_last_V_1_vld_in == 1'b1))) begin
            out_last_V_1_sel_wr <= ~out_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_last_V_1_state == 2'd2) & (out_last_V_1_vld_in == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_last_V_1_vld_in == 1'b0) & (out_last_V_1_ack_out == 1'b1)))) begin
            out_last_V_1_state <= 2'd2;
        end else if ((((out_last_V_1_state == 2'd1) & (out_last_V_1_ack_out == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_last_V_1_ack_out == 1'b0) & (out_last_V_1_vld_in == 1'b1)))) begin
            out_last_V_1_state <= 2'd1;
        end else if (((~((out_last_V_1_vld_in == 1'b0) & (out_last_V_1_ack_out == 1'b1)) & ~((out_last_V_1_ack_out == 1'b0) & (out_last_V_1_vld_in == 1'b1)) & (out_last_V_1_state == 2'd3)) | ((out_last_V_1_state == 2'd1) & (out_last_V_1_ack_out == 1'b1)) | ((out_last_V_1_state == 2'd2) & (out_last_V_1_vld_in == 1'b1)))) begin
            out_last_V_1_state <= 2'd3;
        end else begin
            out_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ovflow_1_sel_rd <= 1'b0;
    end else begin
        if (((ovflow_1_ack_out == 1'b1) & (ovflow_1_vld_out == 1'b1))) begin
            ovflow_1_sel_rd <= ~ovflow_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ovflow_1_sel_wr <= 1'b0;
    end else begin
        if (((ovflow_1_ack_in == 1'b1) & (ovflow_1_vld_in == 1'b1))) begin
            ovflow_1_sel_wr <= ~ovflow_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ovflow_1_state <= 2'd0;
    end else begin
        if ((((ovflow_1_state == 2'd2) & (ovflow_1_vld_in == 1'b0)) | ((ovflow_1_state == 2'd3) & (ovflow_1_vld_in == 1'b0) & (ovflow_1_ack_out == 1'b1)))) begin
            ovflow_1_state <= 2'd2;
        end else if ((((ovflow_1_state == 2'd1) & (ovflow_1_ack_out == 1'b0)) | ((ovflow_1_state == 2'd3) & (ovflow_1_ack_out == 1'b0) & (ovflow_1_vld_in == 1'b1)))) begin
            ovflow_1_state <= 2'd1;
        end else if (((~((ovflow_1_vld_in == 1'b0) & (ovflow_1_ack_out == 1'b1)) & ~((ovflow_1_ack_out == 1'b0) & (ovflow_1_vld_in == 1'b1)) & (ovflow_1_state == 2'd3)) | ((ovflow_1_state == 2'd1) & (ovflow_1_ack_out == 1'b1)) | ((ovflow_1_state == 2'd2) & (ovflow_1_vld_in == 1'b1)))) begin
            ovflow_1_state <= 2'd3;
        end else begin
            ovflow_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((out_data_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_104 <= i_2_reg_146;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_104 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | ((exitcond_fu_115_p2 == 1'd1) & (ifft_status_data_V_empty_n == 1'b0)) | ((exitcond_fu_115_p2 == 1'd0) & (ifft_out_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        i_2_reg_146 <= i_2_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_1_load_A == 1'b1)) begin
        out_data_1_payload_A <= ifft_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_1_load_B == 1'b1)) begin
        out_data_1_payload_B <= ifft_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((out_last_V_1_load_A == 1'b1)) begin
        out_last_V_1_payload_A <= tmp_s_fu_127_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_last_V_1_load_B == 1'b1)) begin
        out_last_V_1_payload_B <= tmp_s_fu_127_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ovflow_1_load_A == 1'b1)) begin
        ovflow_1_payload_A <= tmp_fu_138_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((ovflow_1_load_B == 1'b1)) begin
        ovflow_1_payload_B <= tmp_fu_138_p1;
    end
end

always @ (*) begin
    if ((~((out_data_1_ack_in == 1'b0) | (ovflow_1_ack_in == 1'b0) | (out_last_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_data_1_ack_in == 1'b0) | (ovflow_1_ack_in == 1'b0) | (out_last_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ifft_out_blk_n = ifft_out_empty_n;
    end else begin
        ifft_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((exitcond_fu_115_p2 == 1'd1) & (ifft_status_data_V_empty_n == 1'b0)) | ((exitcond_fu_115_p2 == 1'd0) & (ifft_out_empty_n == 1'b0))) & (exitcond_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ifft_out_read = 1'b1;
    end else begin
        ifft_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ifft_status_data_V_blk_n = ifft_status_data_V_empty_n;
    end else begin
        ifft_status_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((exitcond_fu_115_p2 == 1'd1) & (ifft_status_data_V_empty_n == 1'b0)) | ((exitcond_fu_115_p2 == 1'd0) & (ifft_out_empty_n == 1'b0))) & (exitcond_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ifft_status_data_V_read = 1'b1;
    end else begin
        ifft_status_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_1_sel == 1'b1)) begin
        out_data_1_data_out = out_data_1_payload_B;
    end else begin
        out_data_1_data_out = out_data_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((exitcond_fu_115_p2 == 1'd1) & (ifft_status_data_V_empty_n == 1'b0)) | ((exitcond_fu_115_p2 == 1'd0) & (ifft_out_empty_n == 1'b0))) & (exitcond_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_data_1_vld_in = 1'b1;
    end else begin
        out_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_last_V_1_sel == 1'b1)) begin
        out_last_V_1_data_out = out_last_V_1_payload_B;
    end else begin
        out_last_V_1_data_out = out_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((exitcond_fu_115_p2 == 1'd1) & (ifft_status_data_V_empty_n == 1'b0)) | ((exitcond_fu_115_p2 == 1'd0) & (ifft_out_empty_n == 1'b0))) & (exitcond_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_last_V_1_vld_in = 1'b1;
    end else begin
        out_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((exitcond_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_r_TDATA_blk_n = out_data_1_state[1'd1];
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ovflow_1_sel == 1'b1)) begin
        ovflow_1_data_out = ovflow_1_payload_B;
    end else begin
        ovflow_1_data_out = ovflow_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((exitcond_fu_115_p2 == 1'd1) & (ifft_status_data_V_empty_n == 1'b0)) | ((exitcond_fu_115_p2 == 1'd0) & (ifft_out_empty_n == 1'b0))) & (exitcond_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ovflow_1_vld_in = 1'b1;
    end else begin
        ovflow_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((exitcond_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ovflow_TDATA_blk_n = ovflow_1_state[1'd1];
    end else begin
        ovflow_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((exitcond_fu_115_p2 == 1'd1) & (ifft_status_data_V_empty_n == 1'b0)) | ((exitcond_fu_115_p2 == 1'd0) & (ifft_out_empty_n == 1'b0))) & (exitcond_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((1'b1 == ap_block_state2_io) | ((exitcond_fu_115_p2 == 1'd1) & (ifft_status_data_V_empty_n == 1'b0)) | ((exitcond_fu_115_p2 == 1'd0) & (ifft_out_empty_n == 1'b0))) & (exitcond_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((out_data_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((out_data_1_ack_in == 1'b0) | (ovflow_1_ack_in == 1'b0) | (out_last_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = (((exitcond_fu_115_p2 == 1'd1) & (ifft_status_data_V_empty_n == 1'b0)) | ((exitcond_fu_115_p2 == 1'd0) & (ifft_out_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_io = (((exitcond_fu_115_p2 == 1'd1) & (ovflow_1_ack_in == 1'b0)) | ((exitcond_fu_115_p2 == 1'd0) & (out_data_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_state4 = ((out_data_1_ack_in == 1'b0) | (ovflow_1_ack_in == 1'b0) | (out_last_V_1_ack_in == 1'b0));
end

assign exitcond_fu_115_p2 = ((i_reg_104 == 6'd32) ? 1'b1 : 1'b0);

assign i_2_fu_121_p2 = (i_reg_104 + 6'd1);

assign out_data_1_ack_in = out_data_1_state[1'd1];

assign out_data_1_ack_out = out_r_TREADY;

assign out_data_1_load_A = (out_data_1_state_cmp_full & ~out_data_1_sel_wr);

assign out_data_1_load_B = (out_data_1_state_cmp_full & out_data_1_sel_wr);

assign out_data_1_sel = out_data_1_sel_rd;

assign out_data_1_state_cmp_full = ((out_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_1_vld_out = out_data_1_state[1'd0];

assign out_last_V_1_ack_in = out_last_V_1_state[1'd1];

assign out_last_V_1_ack_out = out_r_TREADY;

assign out_last_V_1_load_A = (out_last_V_1_state_cmp_full & ~out_last_V_1_sel_wr);

assign out_last_V_1_load_B = (out_last_V_1_state_cmp_full & out_last_V_1_sel_wr);

assign out_last_V_1_sel = out_last_V_1_sel_rd;

assign out_last_V_1_state_cmp_full = ((out_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_last_V_1_vld_out = out_last_V_1_state[1'd0];

assign out_r_TDATA = out_data_1_data_out;

assign out_r_TLAST = out_last_V_1_data_out;

assign out_r_TVALID = out_last_V_1_state[1'd0];

assign ovflow_1_ack_in = ovflow_1_state[1'd1];

assign ovflow_1_ack_out = ovflow_TREADY;

assign ovflow_1_load_A = (ovflow_1_state_cmp_full & ~ovflow_1_sel_wr);

assign ovflow_1_load_B = (ovflow_1_state_cmp_full & ovflow_1_sel_wr);

assign ovflow_1_sel = ovflow_1_sel_rd;

assign ovflow_1_state_cmp_full = ((ovflow_1_state != 2'd1) ? 1'b1 : 1'b0);

assign ovflow_1_vld_out = ovflow_1_state[1'd0];

assign ovflow_TDATA = ovflow_1_data_out;

assign ovflow_TVALID = ovflow_1_state[1'd0];

assign tmp_22_fu_134_p1 = ifft_status_data_V_dout[0:0];

assign tmp_fu_138_p1 = tmp_22_fu_134_p1;

assign tmp_s_fu_127_p2 = ((i_reg_104 == 6'd31) ? 1'b1 : 1'b0);

endmodule //be
