// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module be (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ifft_out_dout,
        ifft_out_empty_n,
        ifft_out_read,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TLAST,
        ifft_status_data_V_dout,
        ifft_status_data_V_empty_n,
        ifft_status_data_V_read,
        ovflow_TDATA,
        ovflow_TVALID,
        ovflow_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] ifft_out_dout;
input   ifft_out_empty_n;
output   ifft_out_read;
output  [63:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [0:0] out_r_TLAST;
input  [7:0] ifft_status_data_V_dout;
input   ifft_status_data_V_empty_n;
output   ifft_status_data_V_read;
output  [7:0] ovflow_TDATA;
output   ovflow_TVALID;
input   ovflow_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ifft_out_read;
reg ifft_status_data_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ifft_out_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln75_fu_115_p2;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state3;
reg    ifft_status_data_V_blk_n;
reg    ovflow_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire   [5:0] i_fu_121_p2;
reg   [5:0] i_reg_146;
reg    ap_block_state2;
reg    ap_block_state2_io;
reg   [5:0] i_0_reg_104;
reg    ap_block_state1;
wire   [0:0] trunc_ln681_fu_134_p1;
wire    regslice_both_out_data_U_apdone_blk;
wire    regslice_both_ovflow_U_apdone_blk;
reg    ap_block_state4;
reg   [3:0] ap_NS_fsm;
reg    out_r_TVALID_int;
wire    out_r_TREADY_int;
wire    regslice_both_out_data_U_vld_out;
wire    regslice_both_out_last_V_U_apdone_blk;
wire   [0:0] out_r_TLAST_int;
wire    regslice_both_out_last_V_U_ack_in_dummy;
wire    regslice_both_out_last_V_U_vld_out;
wire   [7:0] ovflow_TDATA_int;
reg    ovflow_TVALID_int;
wire    ovflow_TREADY_int;
wire    regslice_both_ovflow_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

regslice_both #(
    .DataWidth( 64 ))
regslice_both_out_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(ifft_out_dout),
    .vld_in(out_r_TVALID_int),
    .ack_in(out_r_TREADY_int),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_data_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_data_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(out_r_TLAST_int),
    .vld_in(out_r_TVALID_int),
    .ack_in(regslice_both_out_last_V_U_ack_in_dummy),
    .data_out(out_r_TLAST),
    .vld_out(regslice_both_out_last_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_ovflow_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(ovflow_TDATA_int),
    .vld_in(ovflow_TVALID_int),
    .ack_in(ovflow_TREADY_int),
    .data_out(ovflow_TDATA),
    .vld_out(regslice_both_ovflow_U_vld_out),
    .ack_out(ovflow_TREADY),
    .apdone_blk(regslice_both_ovflow_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ovflow_TREADY_int == 1'b0) | (regslice_both_ovflow_U_apdone_blk == 1'b1) | (regslice_both_out_data_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (out_r_TREADY_int == 1'b1))) begin
        i_0_reg_104 <= i_reg_146;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_104 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln75_fu_115_p2 == 1'd1) & (ifft_status_data_V_empty_n == 1'b0)) | ((icmp_ln75_fu_115_p2 == 1'd0) & (ifft_out_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_146 <= i_fu_121_p2;
    end
end

always @ (*) begin
    if ((~((ovflow_TREADY_int == 1'b0) | (regslice_both_ovflow_U_apdone_blk == 1'b1) | (regslice_both_out_data_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ovflow_TREADY_int == 1'b0) | (regslice_both_ovflow_U_apdone_blk == 1'b1) | (regslice_both_out_data_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln75_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ifft_out_blk_n = ifft_out_empty_n;
    end else begin
        ifft_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln75_fu_115_p2 == 1'd1) & (ifft_status_data_V_empty_n == 1'b0)) | ((icmp_ln75_fu_115_p2 == 1'd0) & (ifft_out_empty_n == 1'b0))) & (icmp_ln75_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ifft_out_read = 1'b1;
    end else begin
        ifft_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln75_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ifft_status_data_V_blk_n = ifft_status_data_V_empty_n;
    end else begin
        ifft_status_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln75_fu_115_p2 == 1'd1) & (ifft_status_data_V_empty_n == 1'b0)) | ((icmp_ln75_fu_115_p2 == 1'd0) & (ifft_out_empty_n == 1'b0))) & (icmp_ln75_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ifft_status_data_V_read = 1'b1;
    end else begin
        ifft_status_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln75_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln75_fu_115_p2 == 1'd1) & (ifft_status_data_V_empty_n == 1'b0)) | ((icmp_ln75_fu_115_p2 == 1'd0) & (ifft_out_empty_n == 1'b0))) & (icmp_ln75_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_r_TVALID_int = 1'b1;
    end else begin
        out_r_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln75_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ovflow_TDATA_blk_n = ovflow_TREADY_int;
    end else begin
        ovflow_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln75_fu_115_p2 == 1'd1) & (ifft_status_data_V_empty_n == 1'b0)) | ((icmp_ln75_fu_115_p2 == 1'd0) & (ifft_out_empty_n == 1'b0))) & (icmp_ln75_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ovflow_TVALID_int = 1'b1;
    end else begin
        ovflow_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln75_fu_115_p2 == 1'd1) & (ifft_status_data_V_empty_n == 1'b0)) | ((icmp_ln75_fu_115_p2 == 1'd0) & (ifft_out_empty_n == 1'b0))) & (icmp_ln75_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln75_fu_115_p2 == 1'd1) & (ifft_status_data_V_empty_n == 1'b0)) | ((icmp_ln75_fu_115_p2 == 1'd0) & (ifft_out_empty_n == 1'b0))) & (icmp_ln75_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (out_r_TREADY_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((ovflow_TREADY_int == 1'b0) | (regslice_both_ovflow_U_apdone_blk == 1'b1) | (regslice_both_out_data_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = (((icmp_ln75_fu_115_p2 == 1'd1) & (ifft_status_data_V_empty_n == 1'b0)) | ((icmp_ln75_fu_115_p2 == 1'd0) & (ifft_out_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_io = (((icmp_ln75_fu_115_p2 == 1'd1) & (ovflow_TREADY_int == 1'b0)) | ((icmp_ln75_fu_115_p2 == 1'd0) & (out_r_TREADY_int == 1'b0)));
end

always @ (*) begin
    ap_block_state4 = ((regslice_both_ovflow_U_apdone_blk == 1'b1) | (regslice_both_out_data_U_apdone_blk == 1'b1));
end

assign i_fu_121_p2 = (i_0_reg_104 + 6'd1);

assign icmp_ln75_fu_115_p2 = ((i_0_reg_104 == 6'd32) ? 1'b1 : 1'b0);

assign out_r_TLAST_int = ((i_0_reg_104 == 6'd31) ? 1'b1 : 1'b0);

assign out_r_TVALID = regslice_both_out_data_U_vld_out;

assign ovflow_TDATA_int = trunc_ln681_fu_134_p1;

assign ovflow_TVALID = regslice_both_ovflow_U_vld_out;

assign trunc_ln681_fu_134_p1 = ifft_status_data_V_dout[0:0];

endmodule //be
