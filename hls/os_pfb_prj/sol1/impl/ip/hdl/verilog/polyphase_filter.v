// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module polyphase_filter (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        filter_out_din,
        filter_out_full_n,
        filter_out_write,
        ifft_config_data_V_din,
        ifft_config_data_V_full_n,
        ifft_config_data_V_write
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
output  [63:0] filter_out_din;
input   filter_out_full_n;
output   filter_out_write;
output  [7:0] ifft_config_data_V_din;
input   ifft_config_data_V_full_n;
output   ifft_config_data_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_r_TREADY;
reg filter_out_write;
reg ifft_config_data_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [7:0] filter_state_M_real_address0;
reg    filter_state_M_real_ce0;
reg    filter_state_M_real_we0;
reg   [31:0] filter_state_M_real_d0;
wire   [31:0] filter_state_M_real_q0;
reg   [7:0] filter_state_M_imag_address0;
reg    filter_state_M_imag_ce0;
reg    filter_state_M_imag_we0;
reg   [31:0] filter_state_M_imag_d0;
wire   [31:0] filter_state_M_imag_q0;
wire   [7:0] h_address0;
reg    h_ce0;
wire   [31:0] h_q0;
reg   [3:0] state_idx;
wire   [1:0] shift_states_address0;
reg    shift_states_ce0;
wire   [4:0] shift_states_q0;
reg    in_r_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_1_fu_452_p3;
wire   [0:0] icmp_ln25_fu_465_p2;
reg    filter_out_blk_n;
wire    ap_CS_fsm_state19;
reg    ifft_config_data_V_blk_n;
wire   [4:0] add_ln18_fu_397_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] shl_ln_fu_427_p3;
reg   [7:0] shl_ln_reg_647;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_fu_415_p3;
reg  signed [3:0] state_idx_load_reg_652;
wire  signed [31:0] sext_ln22_1_fu_448_p1;
reg  signed [31:0] sext_ln22_1_reg_663;
reg    ap_predicate_op66_read_state4;
reg    ap_block_state4;
reg   [0:0] icmp_ln25_reg_671;
wire   [63:0] zext_ln28_fu_471_p1;
reg   [63:0] zext_ln28_reg_675;
wire   [31:0] bitcast_ln28_fu_493_p1;
wire   [31:0] bitcast_ln28_1_fu_508_p1;
wire   [3:0] p_fu_513_p2;
wire    ap_CS_fsm_state5;
reg   [4:0] temp_M_real_addr_2_reg_717;
reg   [4:0] temp_M_imag_addr_2_reg_722;
wire   [5:0] m_fu_524_p2;
reg   [5:0] m_reg_732;
reg   [31:0] h_load_reg_737;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_375_p2;
reg   [31:0] tmp_i_i_reg_743;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_380_p2;
reg   [31:0] tmp_2_i_i_reg_748;
wire   [31:0] grp_fu_386_p2;
reg   [31:0] tmp_4_i_i_reg_753;
wire   [31:0] grp_fu_391_p2;
reg   [31:0] tmp_5_i_i_reg_758;
wire   [31:0] grp_fu_363_p2;
reg   [31:0] complex_M_real_writ_reg_763;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_367_p2;
reg   [31:0] complex_M_imag_writ_reg_768;
wire   [31:0] temp_M_real_q0;
wire    ap_CS_fsm_state13;
wire   [31:0] temp_M_imag_q0;
reg   [4:0] shift_reg_783;
wire    ap_CS_fsm_state17;
wire   [5:0] i_fu_536_p2;
reg   [5:0] i_reg_791;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln39_fu_530_p2;
reg   [4:0] temp_M_real_address0;
reg    temp_M_real_ce0;
reg    temp_M_real_we0;
reg   [31:0] temp_M_real_d0;
reg   [4:0] temp_M_imag_address0;
reg    temp_M_imag_ce0;
reg    temp_M_imag_we0;
reg   [31:0] temp_M_imag_d0;
reg   [4:0] phi_ln18_reg_297;
reg    ap_block_state1;
wire   [0:0] icmp_ln18_fu_409_p2;
reg   [3:0] p_0_reg_308;
reg  signed [5:0] m_0_reg_320;
wire    ap_CS_fsm_state16;
reg   [31:0] p_r_M_imag_reg_332;
reg   [31:0] p_r_M_real_reg_342;
reg   [5:0] i_0_reg_352;
wire   [63:0] zext_ln18_fu_403_p1;
wire  signed [63:0] sext_ln37_fu_439_p1;
wire   [63:0] zext_ln30_fu_483_p1;
wire   [63:0] zext_ln32_fu_519_p1;
wire   [63:0] zext_ln41_fu_551_p1;
wire   [3:0] select_ln43_fu_605_p3;
reg   [31:0] grp_fu_363_p0;
reg   [31:0] grp_fu_363_p1;
wire    ap_CS_fsm_state9;
reg   [31:0] grp_fu_367_p0;
reg   [31:0] grp_fu_367_p1;
wire    ap_CS_fsm_state7;
wire   [2:0] trunc_ln23_fu_423_p1;
wire  signed [3:0] sext_ln37_fu_439_p0;
wire  signed [7:0] sext_ln22_fu_444_p1;
wire   [7:0] idx_fu_460_p2;
wire   [7:0] add_ln30_fu_477_p2;
wire   [31:0] trunc_ln28_fu_489_p1;
wire   [31:0] in_M_imag_load_new6_fu_498_p4;
wire   [4:0] trunc_ln40_fu_542_p1;
wire   [4:0] tmpidx_fu_546_p2;
wire   [3:0] add_ln43_fu_557_p2;
wire   [1:0] trunc_ln43_fu_570_p1;
wire   [1:0] trunc_ln43_1_fu_582_p1;
wire   [1:0] xor_ln43_fu_585_p2;
wire   [3:0] p_and_t_fu_591_p3;
wire   [0:0] tmp_2_fu_562_p3;
wire   [3:0] sub_ln43_fu_599_p2;
wire   [3:0] p_and_f_fu_574_p3;
wire   [31:0] bitcast_ln41_1_fu_623_p1;
wire   [31:0] bitcast_ln41_fu_619_p1;
reg   [1:0] grp_fu_363_opcode;
reg   [18:0] ap_NS_fsm;
wire    regslice_both_in_r_U_apdone_blk;
wire   [63:0] in_r_TDATA_int;
wire    in_r_TVALID_int;
reg    in_r_TREADY_int;
wire    regslice_both_in_r_U_ack_in;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 19'd1;
#0 state_idx = 4'd0;
end

polyphase_filter_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
filter_state_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(filter_state_M_real_address0),
    .ce0(filter_state_M_real_ce0),
    .we0(filter_state_M_real_we0),
    .d0(filter_state_M_real_d0),
    .q0(filter_state_M_real_q0)
);

polyphase_filter_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
filter_state_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(filter_state_M_imag_address0),
    .ce0(filter_state_M_imag_ce0),
    .we0(filter_state_M_imag_we0),
    .d0(filter_state_M_imag_d0),
    .q0(filter_state_M_imag_q0)
);

polyphase_filter_h #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
h_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(h_address0),
    .ce0(h_ce0),
    .q0(h_q0)
);

polyphase_filter_dEe #(
    .DataWidth( 5 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
shift_states_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_states_address0),
    .ce0(shift_states_ce0),
    .q0(shift_states_q0)
);

polyphase_filter_eOg #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
temp_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_M_real_address0),
    .ce0(temp_M_real_ce0),
    .we0(temp_M_real_we0),
    .d0(temp_M_real_d0),
    .q0(temp_M_real_q0)
);

polyphase_filter_eOg #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
temp_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_M_imag_address0),
    .ce0(temp_M_imag_ce0),
    .we0(temp_M_imag_we0),
    .d0(temp_M_imag_d0),
    .q0(temp_M_imag_q0)
);

os_pfb_faddfsub_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
os_pfb_faddfsub_3g8j_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_363_p0),
    .din1(grp_fu_363_p1),
    .opcode(grp_fu_363_opcode),
    .ce(1'b1),
    .dout(grp_fu_363_p2)
);

os_pfb_fadd_32ns_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
os_pfb_fadd_32ns_hbi_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_367_p0),
    .din1(grp_fu_367_p1),
    .ce(1'b1),
    .dout(grp_fu_367_p2)
);

os_pfb_fmul_32ns_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
os_pfb_fmul_32ns_ibs_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_real_reg_342),
    .din1(h_load_reg_737),
    .ce(1'b1),
    .dout(grp_fu_375_p2)
);

os_pfb_fmul_32ns_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
os_pfb_fmul_32ns_ibs_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_imag_reg_332),
    .din1(32'd0),
    .ce(1'b1),
    .dout(grp_fu_380_p2)
);

os_pfb_fmul_32ns_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
os_pfb_fmul_32ns_ibs_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_imag_reg_332),
    .din1(h_load_reg_737),
    .ce(1'b1),
    .dout(grp_fu_386_p2)
);

os_pfb_fmul_32ns_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
os_pfb_fmul_32ns_ibs_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_real_reg_342),
    .din1(32'd0),
    .ce(1'b1),
    .dout(grp_fu_391_p2)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_in_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_r_TDATA),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_r_U_ack_in),
    .data_out(in_r_TDATA_int),
    .vld_out(in_r_TVALID_int),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_r_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln39_fu_530_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((filter_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        i_0_reg_352 <= i_reg_791;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        i_0_reg_352 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_415_p3 == 1'd0))) begin
        m_0_reg_320 <= 6'd31;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        m_0_reg_320 <= m_reg_732;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln18_fu_409_p2 == 1'd1))) begin
        p_0_reg_308 <= 4'd7;
    end else if ((~((ap_predicate_op66_read_state4 == 1'b1) & (in_r_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (tmp_1_fu_452_p3 == 1'd1))) begin
        p_0_reg_308 <= p_fu_513_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op66_read_state4 == 1'b1) & (in_r_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_465_p2 == 1'd1) & (tmp_1_fu_452_p3 == 1'd0))) begin
        p_r_M_imag_reg_332 <= bitcast_ln28_1_fu_508_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln25_reg_671 == 1'd0))) begin
        p_r_M_imag_reg_332 <= filter_state_M_imag_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op66_read_state4 == 1'b1) & (in_r_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_465_p2 == 1'd1) & (tmp_1_fu_452_p3 == 1'd0))) begin
        p_r_M_real_reg_342 <= bitcast_ln28_fu_493_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln25_reg_671 == 1'd0))) begin
        p_r_M_real_reg_342 <= filter_state_M_real_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln18_fu_409_p2 == 1'd0))) begin
        phi_ln18_reg_297 <= add_ln18_fu_397_p2;
    end else if ((~((ap_done_reg == 1'b1) | (ifft_config_data_V_full_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln18_reg_297 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        complex_M_imag_writ_reg_768 <= grp_fu_367_p2;
        complex_M_real_writ_reg_763 <= grp_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        h_load_reg_737 <= h_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i_reg_791 <= i_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op66_read_state4 == 1'b1) & (in_r_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (tmp_1_fu_452_p3 == 1'd0))) begin
        icmp_ln25_reg_671 <= icmp_ln25_fu_465_p2;
        zext_ln28_reg_675[7 : 0] <= zext_ln28_fu_471_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_reg_732 <= m_fu_524_p2;
        temp_M_imag_addr_2_reg_722 <= zext_ln32_fu_519_p1;
        temp_M_real_addr_2_reg_717 <= zext_ln32_fu_519_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op66_read_state4 == 1'b1) & (in_r_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        sext_ln22_1_reg_663 <= sext_ln22_1_fu_448_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        shift_reg_783 <= shift_states_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_415_p3 == 1'd0))) begin
        shl_ln_reg_647[7 : 5] <= shl_ln_fu_427_p3[7 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln39_fu_530_p2 == 1'd1))) begin
        state_idx <= select_ln43_fu_605_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_415_p3 == 1'd1))) begin
        state_idx_load_reg_652 <= state_idx;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_2_i_i_reg_748 <= grp_fu_380_p2;
        tmp_4_i_i_reg_753 <= grp_fu_386_p2;
        tmp_5_i_i_reg_758 <= grp_fu_391_p2;
        tmp_i_i_reg_743 <= grp_fu_375_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln39_fu_530_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        filter_out_blk_n = filter_out_full_n;
    end else begin
        filter_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((filter_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        filter_out_write = 1'b1;
    end else begin
        filter_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        filter_state_M_imag_address0 = zext_ln28_reg_675;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_465_p2 == 1'd1) & (tmp_1_fu_452_p3 == 1'd0))) begin
        filter_state_M_imag_address0 = zext_ln28_fu_471_p1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_465_p2 == 1'd0) & (tmp_1_fu_452_p3 == 1'd0))) begin
        filter_state_M_imag_address0 = zext_ln30_fu_483_p1;
    end else begin
        filter_state_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (~((ap_predicate_op66_read_state4 == 1'b1) & (in_r_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_465_p2 == 1'd0) & (tmp_1_fu_452_p3 == 1'd0)) | (~((ap_predicate_op66_read_state4 == 1'b1) & (in_r_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_465_p2 == 1'd1) & (tmp_1_fu_452_p3 == 1'd0)))) begin
        filter_state_M_imag_ce0 = 1'b1;
    end else begin
        filter_state_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        filter_state_M_imag_d0 = filter_state_M_imag_q0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_465_p2 == 1'd1) & (tmp_1_fu_452_p3 == 1'd0))) begin
        filter_state_M_imag_d0 = bitcast_ln28_1_fu_508_p1;
    end else begin
        filter_state_M_imag_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_ln25_reg_671 == 1'd0)) | (~((ap_predicate_op66_read_state4 == 1'b1) & (in_r_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_465_p2 == 1'd1) & (tmp_1_fu_452_p3 == 1'd0)))) begin
        filter_state_M_imag_we0 = 1'b1;
    end else begin
        filter_state_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        filter_state_M_real_address0 = zext_ln28_reg_675;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_465_p2 == 1'd1) & (tmp_1_fu_452_p3 == 1'd0))) begin
        filter_state_M_real_address0 = zext_ln28_fu_471_p1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_465_p2 == 1'd0) & (tmp_1_fu_452_p3 == 1'd0))) begin
        filter_state_M_real_address0 = zext_ln30_fu_483_p1;
    end else begin
        filter_state_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (~((ap_predicate_op66_read_state4 == 1'b1) & (in_r_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_465_p2 == 1'd0) & (tmp_1_fu_452_p3 == 1'd0)) | (~((ap_predicate_op66_read_state4 == 1'b1) & (in_r_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_465_p2 == 1'd1) & (tmp_1_fu_452_p3 == 1'd0)))) begin
        filter_state_M_real_ce0 = 1'b1;
    end else begin
        filter_state_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        filter_state_M_real_d0 = filter_state_M_real_q0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_465_p2 == 1'd1) & (tmp_1_fu_452_p3 == 1'd0))) begin
        filter_state_M_real_d0 = bitcast_ln28_fu_493_p1;
    end else begin
        filter_state_M_real_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_ln25_reg_671 == 1'd0)) | (~((ap_predicate_op66_read_state4 == 1'b1) & (in_r_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_465_p2 == 1'd1) & (tmp_1_fu_452_p3 == 1'd0)))) begin
        filter_state_M_real_we0 = 1'b1;
    end else begin
        filter_state_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_363_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_363_opcode = 2'd0;
    end else begin
        grp_fu_363_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_363_p0 = temp_M_real_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_363_p0 = tmp_i_i_reg_743;
    end else begin
        grp_fu_363_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_363_p1 = complex_M_real_writ_reg_763;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_363_p1 = tmp_2_i_i_reg_748;
    end else begin
        grp_fu_363_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_367_p0 = temp_M_imag_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_367_p0 = tmp_4_i_i_reg_753;
    end else begin
        grp_fu_367_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_367_p1 = complex_M_imag_writ_reg_768;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_367_p1 = tmp_5_i_i_reg_758;
    end else begin
        grp_fu_367_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        h_ce0 = 1'b1;
    end else begin
        h_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ifft_config_data_V_blk_n = ifft_config_data_V_full_n;
    end else begin
        ifft_config_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ifft_config_data_V_full_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ifft_config_data_V_write = 1'b1;
    end else begin
        ifft_config_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_465_p2 == 1'd1) & (tmp_1_fu_452_p3 == 1'd0))) begin
        in_r_TDATA_blk_n = in_r_TVALID_int;
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in_r_U_ack_in == 1'b1) & (in_r_TVALID == 1'b1))) begin
        in_r_TREADY = 1'b1;
    end else begin
        in_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op66_read_state4 == 1'b1) & (in_r_TVALID_int == 1'b0)) & (ap_predicate_op66_read_state4 == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_r_TREADY_int = 1'b1;
    end else begin
        in_r_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln39_fu_530_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_states_ce0 = 1'b1;
    end else begin
        shift_states_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_M_imag_address0 = zext_ln41_fu_551_p1;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        temp_M_imag_address0 = temp_M_imag_addr_2_reg_722;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_M_imag_address0 = zext_ln18_fu_403_p1;
    end else begin
        temp_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state2))) begin
        temp_M_imag_ce0 = 1'b1;
    end else begin
        temp_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        temp_M_imag_d0 = grp_fu_367_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_M_imag_d0 = 32'd0;
    end else begin
        temp_M_imag_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state2))) begin
        temp_M_imag_we0 = 1'b1;
    end else begin
        temp_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_M_real_address0 = zext_ln41_fu_551_p1;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        temp_M_real_address0 = temp_M_real_addr_2_reg_717;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_M_real_address0 = zext_ln18_fu_403_p1;
    end else begin
        temp_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state2))) begin
        temp_M_real_ce0 = 1'b1;
    end else begin
        temp_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        temp_M_real_d0 = grp_fu_363_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_M_real_d0 = 32'd0;
    end else begin
        temp_M_real_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state2))) begin
        temp_M_real_we0 = 1'b1;
    end else begin
        temp_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ifft_config_data_V_full_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln18_fu_409_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_415_p3 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((ap_predicate_op66_read_state4 == 1'b1) & (in_r_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (tmp_1_fu_452_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((ap_predicate_op66_read_state4 == 1'b1) & (in_r_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (tmp_1_fu_452_p3 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln39_fu_530_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((filter_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_fu_397_p2 = (phi_ln18_reg_297 + 5'd1);

assign add_ln30_fu_477_p2 = ($signed(idx_fu_460_p2) + $signed(8'd232));

assign add_ln43_fu_557_p2 = ($signed(4'd1) + $signed(state_idx_load_reg_652));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ifft_config_data_V_full_n == 1'b0) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((ap_predicate_op66_read_state4 == 1'b1) & (in_r_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_predicate_op66_read_state4 = ((icmp_ln25_fu_465_p2 == 1'd1) & (tmp_1_fu_452_p3 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign bitcast_ln28_1_fu_508_p1 = in_M_imag_load_new6_fu_498_p4;

assign bitcast_ln28_fu_493_p1 = trunc_ln28_fu_489_p1;

assign bitcast_ln41_1_fu_623_p1 = temp_M_imag_q0;

assign bitcast_ln41_fu_619_p1 = temp_M_real_q0;

assign filter_out_din = {{bitcast_ln41_1_fu_623_p1}, {bitcast_ln41_fu_619_p1}};

assign h_address0 = zext_ln28_reg_675;

assign i_fu_536_p2 = (i_0_reg_352 + 6'd1);

assign icmp_ln18_fu_409_p2 = ((phi_ln18_reg_297 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_465_p2 = ((idx_fu_460_p2 < 8'd24) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_530_p2 = ((i_0_reg_352 == 6'd32) ? 1'b1 : 1'b0);

assign idx_fu_460_p2 = ($signed(shl_ln_reg_647) + $signed(sext_ln22_fu_444_p1));

assign ifft_config_data_V_din = 8'd0;

assign in_M_imag_load_new6_fu_498_p4 = {{in_r_TDATA_int[63:32]}};

assign m_fu_524_p2 = ($signed(m_0_reg_320) + $signed(6'd63));

assign p_and_f_fu_574_p3 = {{2'd0}, {trunc_ln43_fu_570_p1}};

assign p_and_t_fu_591_p3 = {{2'd0}, {xor_ln43_fu_585_p2}};

assign p_fu_513_p2 = ($signed(p_0_reg_308) + $signed(4'd15));

assign select_ln43_fu_605_p3 = ((tmp_2_fu_562_p3[0:0] === 1'b1) ? sub_ln43_fu_599_p2 : p_and_f_fu_574_p3);

assign sext_ln22_1_fu_448_p1 = m_0_reg_320;

assign sext_ln22_fu_444_p1 = m_0_reg_320;

assign sext_ln37_fu_439_p0 = state_idx;

assign sext_ln37_fu_439_p1 = sext_ln37_fu_439_p0;

assign shift_states_address0 = sext_ln37_fu_439_p1;

assign shl_ln_fu_427_p3 = {{trunc_ln23_fu_423_p1}, {5'd0}};

assign start_out = real_start;

assign sub_ln43_fu_599_p2 = (4'd0 - p_and_t_fu_591_p3);

assign tmp_1_fu_452_p3 = m_0_reg_320[32'd5];

assign tmp_2_fu_562_p3 = add_ln43_fu_557_p2[32'd3];

assign tmp_fu_415_p3 = p_0_reg_308[32'd3];

assign tmpidx_fu_546_p2 = (trunc_ln40_fu_542_p1 - shift_reg_783);

assign trunc_ln23_fu_423_p1 = p_0_reg_308[2:0];

assign trunc_ln28_fu_489_p1 = in_r_TDATA_int[31:0];

assign trunc_ln40_fu_542_p1 = i_0_reg_352[4:0];

assign trunc_ln43_1_fu_582_p1 = state_idx_load_reg_652[1:0];

assign trunc_ln43_fu_570_p1 = add_ln43_fu_557_p2[1:0];

assign xor_ln43_fu_585_p2 = (trunc_ln43_1_fu_582_p1 ^ 2'd3);

assign zext_ln18_fu_403_p1 = phi_ln18_reg_297;

assign zext_ln28_fu_471_p1 = idx_fu_460_p2;

assign zext_ln30_fu_483_p1 = add_ln30_fu_477_p2;

assign zext_ln32_fu_519_p1 = $unsigned(sext_ln22_1_reg_663);

assign zext_ln41_fu_551_p1 = tmpidx_fu_546_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_647[4:0] <= 5'b00000;
    zext_ln28_reg_675[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //polyphase_filter
