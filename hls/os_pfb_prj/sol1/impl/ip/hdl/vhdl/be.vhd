-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity be is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ifft_out_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    ifft_out_empty_n : IN STD_LOGIC;
    ifft_out_read : OUT STD_LOGIC;
    out_r_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ifft_status_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    ifft_status_data_V_empty_n : IN STD_LOGIC;
    ifft_status_data_V_read : OUT STD_LOGIC;
    ovflow_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    ovflow_TVALID : OUT STD_LOGIC;
    ovflow_TREADY : IN STD_LOGIC );
end;


architecture behav of be is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ifft_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln75_fu_115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ifft_status_data_V_blk_n : STD_LOGIC;
    signal ovflow_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_fu_121_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_146 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal i_0_reg_104 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln681_fu_134_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_out_data_U_apdone_blk : STD_LOGIC;
    signal regslice_both_ovflow_U_apdone_blk : STD_LOGIC;
    signal ap_block_state4 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal out_r_TVALID_int : STD_LOGIC;
    signal out_r_TREADY_int : STD_LOGIC;
    signal regslice_both_out_data_U_vld_out : STD_LOGIC;
    signal regslice_both_out_last_V_U_apdone_blk : STD_LOGIC;
    signal out_r_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_out_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_last_V_U_vld_out : STD_LOGIC;
    signal ovflow_TDATA_int : STD_LOGIC_VECTOR (7 downto 0);
    signal ovflow_TVALID_int : STD_LOGIC;
    signal ovflow_TREADY_int : STD_LOGIC;
    signal regslice_both_ovflow_U_vld_out : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_out_data_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ifft_out_dout,
        vld_in => out_r_TVALID_int,
        ack_in => out_r_TREADY_int,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_data_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_data_U_apdone_blk);

    regslice_both_out_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => out_r_TLAST_int,
        vld_in => out_r_TVALID_int,
        ack_in => regslice_both_out_last_V_U_ack_in_dummy,
        data_out => out_r_TLAST,
        vld_out => regslice_both_out_last_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_last_V_U_apdone_blk);

    regslice_both_ovflow_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ovflow_TDATA_int,
        vld_in => ovflow_TVALID_int,
        ack_in => ovflow_TREADY_int,
        data_out => ovflow_TDATA,
        vld_out => regslice_both_ovflow_U_vld_out,
        ack_out => ovflow_TREADY,
        apdone_blk => regslice_both_ovflow_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ovflow_TREADY_int = ap_const_logic_0) or (regslice_both_ovflow_U_apdone_blk = ap_const_logic_1) or (regslice_both_out_data_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (out_r_TREADY_int = ap_const_logic_1))) then 
                i_0_reg_104 <= i_reg_146;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_104 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((icmp_ln75_fu_115_p2 = ap_const_lv1_1) and (ifft_status_data_V_empty_n = ap_const_logic_0)) or ((icmp_ln75_fu_115_p2 = ap_const_lv1_0) and (ifft_out_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_146 <= i_fu_121_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ifft_out_empty_n, ifft_status_data_V_empty_n, ap_CS_fsm_state2, icmp_ln75_fu_115_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_block_state2_io, regslice_both_out_data_U_apdone_blk, regslice_both_ovflow_U_apdone_blk, out_r_TREADY_int, ovflow_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((icmp_ln75_fu_115_p2 = ap_const_lv1_1) and (ifft_status_data_V_empty_n = ap_const_logic_0)) or ((icmp_ln75_fu_115_p2 = ap_const_lv1_0) and (ifft_out_empty_n = ap_const_logic_0)))) and (icmp_ln75_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((icmp_ln75_fu_115_p2 = ap_const_lv1_1) and (ifft_status_data_V_empty_n = ap_const_logic_0)) or ((icmp_ln75_fu_115_p2 = ap_const_lv1_0) and (ifft_out_empty_n = ap_const_logic_0)))) and (icmp_ln75_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (out_r_TREADY_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((ovflow_TREADY_int = ap_const_logic_0) or (regslice_both_ovflow_U_apdone_blk = ap_const_logic_1) or (regslice_both_out_data_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(ifft_out_empty_n, ifft_status_data_V_empty_n, icmp_ln75_fu_115_p2)
    begin
                ap_block_state2 <= (((icmp_ln75_fu_115_p2 = ap_const_lv1_1) and (ifft_status_data_V_empty_n = ap_const_logic_0)) or ((icmp_ln75_fu_115_p2 = ap_const_lv1_0) and (ifft_out_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state2_io_assign_proc : process(icmp_ln75_fu_115_p2, out_r_TREADY_int, ovflow_TREADY_int)
    begin
                ap_block_state2_io <= (((icmp_ln75_fu_115_p2 = ap_const_lv1_1) and (ovflow_TREADY_int = ap_const_logic_0)) or ((icmp_ln75_fu_115_p2 = ap_const_lv1_0) and (out_r_TREADY_int = ap_const_logic_0)));
    end process;


    ap_block_state4_assign_proc : process(regslice_both_out_data_U_apdone_blk, regslice_both_ovflow_U_apdone_blk)
    begin
                ap_block_state4 <= ((regslice_both_ovflow_U_apdone_blk = ap_const_logic_1) or (regslice_both_out_data_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4, regslice_both_out_data_U_apdone_blk, regslice_both_ovflow_U_apdone_blk, ovflow_TREADY_int)
    begin
        if ((not(((ovflow_TREADY_int = ap_const_logic_0) or (regslice_both_ovflow_U_apdone_blk = ap_const_logic_1) or (regslice_both_out_data_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, regslice_both_out_data_U_apdone_blk, regslice_both_ovflow_U_apdone_blk, ovflow_TREADY_int)
    begin
        if ((not(((ovflow_TREADY_int = ap_const_logic_0) or (regslice_both_ovflow_U_apdone_blk = ap_const_logic_1) or (regslice_both_out_data_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_121_p2 <= std_logic_vector(unsigned(i_0_reg_104) + unsigned(ap_const_lv6_1));
    icmp_ln75_fu_115_p2 <= "1" when (i_0_reg_104 = ap_const_lv6_20) else "0";

    ifft_out_blk_n_assign_proc : process(ifft_out_empty_n, ap_CS_fsm_state2, icmp_ln75_fu_115_p2)
    begin
        if (((icmp_ln75_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifft_out_blk_n <= ifft_out_empty_n;
        else 
            ifft_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ifft_out_read_assign_proc : process(ifft_out_empty_n, ifft_status_data_V_empty_n, ap_CS_fsm_state2, icmp_ln75_fu_115_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((icmp_ln75_fu_115_p2 = ap_const_lv1_1) and (ifft_status_data_V_empty_n = ap_const_logic_0)) or ((icmp_ln75_fu_115_p2 = ap_const_lv1_0) and (ifft_out_empty_n = ap_const_logic_0)))) and (icmp_ln75_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifft_out_read <= ap_const_logic_1;
        else 
            ifft_out_read <= ap_const_logic_0;
        end if; 
    end process;


    ifft_status_data_V_blk_n_assign_proc : process(ifft_status_data_V_empty_n, ap_CS_fsm_state2, icmp_ln75_fu_115_p2)
    begin
        if (((icmp_ln75_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifft_status_data_V_blk_n <= ifft_status_data_V_empty_n;
        else 
            ifft_status_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ifft_status_data_V_read_assign_proc : process(ifft_out_empty_n, ifft_status_data_V_empty_n, ap_CS_fsm_state2, icmp_ln75_fu_115_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((icmp_ln75_fu_115_p2 = ap_const_lv1_1) and (ifft_status_data_V_empty_n = ap_const_logic_0)) or ((icmp_ln75_fu_115_p2 = ap_const_lv1_0) and (ifft_out_empty_n = ap_const_logic_0)))) and (icmp_ln75_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifft_status_data_V_read <= ap_const_logic_1;
        else 
            ifft_status_data_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln75_fu_115_p2, ap_CS_fsm_state3, out_r_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln75_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TLAST_int <= "1" when (i_0_reg_104 = ap_const_lv6_1F) else "0";
    out_r_TVALID <= regslice_both_out_data_U_vld_out;

    out_r_TVALID_int_assign_proc : process(ifft_out_empty_n, ifft_status_data_V_empty_n, ap_CS_fsm_state2, icmp_ln75_fu_115_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((icmp_ln75_fu_115_p2 = ap_const_lv1_1) and (ifft_status_data_V_empty_n = ap_const_logic_0)) or ((icmp_ln75_fu_115_p2 = ap_const_lv1_0) and (ifft_out_empty_n = ap_const_logic_0)))) and (icmp_ln75_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_r_TVALID_int <= ap_const_logic_1;
        else 
            out_r_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    ovflow_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln75_fu_115_p2, ap_CS_fsm_state4, ovflow_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln75_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ovflow_TDATA_blk_n <= ovflow_TREADY_int;
        else 
            ovflow_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ovflow_TDATA_int <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln681_fu_134_p1),8));
    ovflow_TVALID <= regslice_both_ovflow_U_vld_out;

    ovflow_TVALID_int_assign_proc : process(ifft_out_empty_n, ifft_status_data_V_empty_n, ap_CS_fsm_state2, icmp_ln75_fu_115_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((icmp_ln75_fu_115_p2 = ap_const_lv1_1) and (ifft_status_data_V_empty_n = ap_const_logic_0)) or ((icmp_ln75_fu_115_p2 = ap_const_lv1_0) and (ifft_out_empty_n = ap_const_logic_0)))) and (icmp_ln75_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ovflow_TVALID_int <= ap_const_logic_1;
        else 
            ovflow_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln681_fu_134_p1 <= ifft_status_data_V_dout(1 - 1 downto 0);
end behav;
