-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity be is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ifft_out_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    ifft_out_empty_n : IN STD_LOGIC;
    ifft_out_read : OUT STD_LOGIC;
    out_r_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ifft_status_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    ifft_status_data_V_empty_n : IN STD_LOGIC;
    ifft_status_data_V_read : OUT STD_LOGIC;
    ovflow_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    ovflow_TVALID : OUT STD_LOGIC;
    ovflow_TREADY : IN STD_LOGIC );
end;


architecture behav of be is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_data_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal out_data_1_vld_in : STD_LOGIC;
    signal out_data_1_vld_out : STD_LOGIC;
    signal out_data_1_ack_in : STD_LOGIC;
    signal out_data_1_ack_out : STD_LOGIC;
    signal out_data_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal out_data_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal out_data_1_sel_rd : STD_LOGIC := '0';
    signal out_data_1_sel_wr : STD_LOGIC := '0';
    signal out_data_1_sel : STD_LOGIC;
    signal out_data_1_load_A : STD_LOGIC;
    signal out_data_1_load_B : STD_LOGIC;
    signal out_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_data_1_state_cmp_full : STD_LOGIC;
    signal out_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_last_V_1_vld_in : STD_LOGIC;
    signal out_last_V_1_vld_out : STD_LOGIC;
    signal out_last_V_1_ack_in : STD_LOGIC;
    signal out_last_V_1_ack_out : STD_LOGIC;
    signal out_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_last_V_1_sel : STD_LOGIC;
    signal out_last_V_1_load_A : STD_LOGIC;
    signal out_last_V_1_load_B : STD_LOGIC;
    signal out_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_last_V_1_state_cmp_full : STD_LOGIC;
    signal ovflow_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal ovflow_1_vld_in : STD_LOGIC;
    signal ovflow_1_vld_out : STD_LOGIC;
    signal ovflow_1_ack_in : STD_LOGIC;
    signal ovflow_1_ack_out : STD_LOGIC;
    signal ovflow_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal ovflow_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal ovflow_1_sel_rd : STD_LOGIC := '0';
    signal ovflow_1_sel_wr : STD_LOGIC := '0';
    signal ovflow_1_sel : STD_LOGIC;
    signal ovflow_1_load_A : STD_LOGIC;
    signal ovflow_1_load_B : STD_LOGIC;
    signal ovflow_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ovflow_1_state_cmp_full : STD_LOGIC;
    signal ifft_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ifft_status_data_V_blk_n : STD_LOGIC;
    signal ovflow_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_2_fu_121_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_146 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal tmp_s_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_138_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_104 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_22_fu_134_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((out_data_1_ack_in = ap_const_logic_0) or (ovflow_1_ack_in = ap_const_logic_0) or (out_last_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    out_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_data_1_ack_out = ap_const_logic_1) and (out_data_1_vld_out = ap_const_logic_1))) then 
                                        out_data_1_sel_rd <= not(out_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_data_1_ack_in = ap_const_logic_1) and (out_data_1_vld_in = ap_const_logic_1))) then 
                                        out_data_1_sel_wr <= not(out_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_data_1_state <= ap_const_lv2_0;
            else
                if ((((out_data_1_state = ap_const_lv2_2) and (out_data_1_vld_in = ap_const_logic_0)) or ((out_data_1_state = ap_const_lv2_3) and (out_data_1_vld_in = ap_const_logic_0) and (out_data_1_ack_out = ap_const_logic_1)))) then 
                    out_data_1_state <= ap_const_lv2_2;
                elsif ((((out_data_1_state = ap_const_lv2_1) and (out_data_1_ack_out = ap_const_logic_0)) or ((out_data_1_state = ap_const_lv2_3) and (out_data_1_ack_out = ap_const_logic_0) and (out_data_1_vld_in = ap_const_logic_1)))) then 
                    out_data_1_state <= ap_const_lv2_1;
                elsif (((not(((out_data_1_vld_in = ap_const_logic_0) and (out_data_1_ack_out = ap_const_logic_1))) and not(((out_data_1_ack_out = ap_const_logic_0) and (out_data_1_vld_in = ap_const_logic_1))) and (out_data_1_state = ap_const_lv2_3)) or ((out_data_1_state = ap_const_lv2_1) and (out_data_1_ack_out = ap_const_logic_1)) or ((out_data_1_state = ap_const_lv2_2) and (out_data_1_vld_in = ap_const_logic_1)))) then 
                    out_data_1_state <= ap_const_lv2_3;
                else 
                    out_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_last_V_1_ack_out = ap_const_logic_1) and (out_last_V_1_vld_out = ap_const_logic_1))) then 
                                        out_last_V_1_sel_rd <= not(out_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_last_V_1_ack_in = ap_const_logic_1) and (out_last_V_1_vld_in = ap_const_logic_1))) then 
                                        out_last_V_1_sel_wr <= not(out_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_last_V_1_state = ap_const_lv2_2) and (out_last_V_1_vld_in = ap_const_logic_0)) or ((out_last_V_1_state = ap_const_lv2_3) and (out_last_V_1_vld_in = ap_const_logic_0) and (out_last_V_1_ack_out = ap_const_logic_1)))) then 
                    out_last_V_1_state <= ap_const_lv2_2;
                elsif ((((out_last_V_1_state = ap_const_lv2_1) and (out_last_V_1_ack_out = ap_const_logic_0)) or ((out_last_V_1_state = ap_const_lv2_3) and (out_last_V_1_ack_out = ap_const_logic_0) and (out_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_last_V_1_vld_in = ap_const_logic_0) and (out_last_V_1_ack_out = ap_const_logic_1))) and not(((out_last_V_1_ack_out = ap_const_logic_0) and (out_last_V_1_vld_in = ap_const_logic_1))) and (out_last_V_1_state = ap_const_lv2_3)) or ((out_last_V_1_state = ap_const_lv2_1) and (out_last_V_1_ack_out = ap_const_logic_1)) or ((out_last_V_1_state = ap_const_lv2_2) and (out_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ovflow_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ovflow_1_sel_rd <= ap_const_logic_0;
            else
                if (((ovflow_1_ack_out = ap_const_logic_1) and (ovflow_1_vld_out = ap_const_logic_1))) then 
                                        ovflow_1_sel_rd <= not(ovflow_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    ovflow_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ovflow_1_sel_wr <= ap_const_logic_0;
            else
                if (((ovflow_1_ack_in = ap_const_logic_1) and (ovflow_1_vld_in = ap_const_logic_1))) then 
                                        ovflow_1_sel_wr <= not(ovflow_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    ovflow_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ovflow_1_state <= ap_const_lv2_0;
            else
                if ((((ovflow_1_state = ap_const_lv2_2) and (ovflow_1_vld_in = ap_const_logic_0)) or ((ovflow_1_state = ap_const_lv2_3) and (ovflow_1_vld_in = ap_const_logic_0) and (ovflow_1_ack_out = ap_const_logic_1)))) then 
                    ovflow_1_state <= ap_const_lv2_2;
                elsif ((((ovflow_1_state = ap_const_lv2_1) and (ovflow_1_ack_out = ap_const_logic_0)) or ((ovflow_1_state = ap_const_lv2_3) and (ovflow_1_ack_out = ap_const_logic_0) and (ovflow_1_vld_in = ap_const_logic_1)))) then 
                    ovflow_1_state <= ap_const_lv2_1;
                elsif (((not(((ovflow_1_vld_in = ap_const_logic_0) and (ovflow_1_ack_out = ap_const_logic_1))) and not(((ovflow_1_ack_out = ap_const_logic_0) and (ovflow_1_vld_in = ap_const_logic_1))) and (ovflow_1_state = ap_const_lv2_3)) or ((ovflow_1_state = ap_const_lv2_1) and (ovflow_1_ack_out = ap_const_logic_1)) or ((ovflow_1_state = ap_const_lv2_2) and (ovflow_1_vld_in = ap_const_logic_1)))) then 
                    ovflow_1_state <= ap_const_lv2_3;
                else 
                    ovflow_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((out_data_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_104 <= i_2_reg_146;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_104 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((exitcond_fu_115_p2 = ap_const_lv1_1) and (ifft_status_data_V_empty_n = ap_const_logic_0)) or ((exitcond_fu_115_p2 = ap_const_lv1_0) and (ifft_out_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_2_reg_146 <= i_2_fu_121_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_1_load_A = ap_const_logic_1)) then
                out_data_1_payload_A <= ifft_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_1_load_B = ap_const_logic_1)) then
                out_data_1_payload_B <= ifft_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_last_V_1_load_A = ap_const_logic_1)) then
                out_last_V_1_payload_A <= tmp_s_fu_127_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_last_V_1_load_B = ap_const_logic_1)) then
                out_last_V_1_payload_B <= tmp_s_fu_127_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ovflow_1_load_A = ap_const_logic_1)) then
                ovflow_1_payload_A <= tmp_fu_138_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ovflow_1_load_B = ap_const_logic_1)) then
                ovflow_1_payload_B <= tmp_fu_138_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ifft_out_empty_n, out_data_1_ack_in, out_last_V_1_ack_in, ifft_status_data_V_empty_n, ovflow_1_ack_in, ap_CS_fsm_state2, exitcond_fu_115_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_block_state2_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((exitcond_fu_115_p2 = ap_const_lv1_1) and (ifft_status_data_V_empty_n = ap_const_logic_0)) or ((exitcond_fu_115_p2 = ap_const_lv1_0) and (ifft_out_empty_n = ap_const_logic_0)))) and (exitcond_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((exitcond_fu_115_p2 = ap_const_lv1_1) and (ifft_status_data_V_empty_n = ap_const_logic_0)) or ((exitcond_fu_115_p2 = ap_const_lv1_0) and (ifft_out_empty_n = ap_const_logic_0)))) and (exitcond_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((out_data_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((out_data_1_ack_in = ap_const_logic_0) or (ovflow_1_ack_in = ap_const_logic_0) or (out_last_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(ifft_out_empty_n, ifft_status_data_V_empty_n, exitcond_fu_115_p2)
    begin
                ap_block_state2 <= (((exitcond_fu_115_p2 = ap_const_lv1_1) and (ifft_status_data_V_empty_n = ap_const_logic_0)) or ((exitcond_fu_115_p2 = ap_const_lv1_0) and (ifft_out_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state2_io_assign_proc : process(out_data_1_ack_in, ovflow_1_ack_in, exitcond_fu_115_p2)
    begin
                ap_block_state2_io <= (((exitcond_fu_115_p2 = ap_const_lv1_1) and (ovflow_1_ack_in = ap_const_logic_0)) or ((exitcond_fu_115_p2 = ap_const_lv1_0) and (out_data_1_ack_in = ap_const_logic_0)));
    end process;


    ap_block_state4_assign_proc : process(out_data_1_ack_in, out_last_V_1_ack_in, ovflow_1_ack_in)
    begin
                ap_block_state4 <= ((out_data_1_ack_in = ap_const_logic_0) or (ovflow_1_ack_in = ap_const_logic_0) or (out_last_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, out_data_1_ack_in, out_last_V_1_ack_in, ovflow_1_ack_in, ap_CS_fsm_state4)
    begin
        if ((not(((out_data_1_ack_in = ap_const_logic_0) or (ovflow_1_ack_in = ap_const_logic_0) or (out_last_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_data_1_ack_in, out_last_V_1_ack_in, ovflow_1_ack_in, ap_CS_fsm_state4)
    begin
        if ((not(((out_data_1_ack_in = ap_const_logic_0) or (ovflow_1_ack_in = ap_const_logic_0) or (out_last_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_115_p2 <= "1" when (i_reg_104 = ap_const_lv6_20) else "0";
    i_2_fu_121_p2 <= std_logic_vector(unsigned(i_reg_104) + unsigned(ap_const_lv6_1));

    ifft_out_blk_n_assign_proc : process(ifft_out_empty_n, ap_CS_fsm_state2, exitcond_fu_115_p2)
    begin
        if (((exitcond_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifft_out_blk_n <= ifft_out_empty_n;
        else 
            ifft_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ifft_out_read_assign_proc : process(ifft_out_empty_n, ifft_status_data_V_empty_n, ap_CS_fsm_state2, exitcond_fu_115_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((exitcond_fu_115_p2 = ap_const_lv1_1) and (ifft_status_data_V_empty_n = ap_const_logic_0)) or ((exitcond_fu_115_p2 = ap_const_lv1_0) and (ifft_out_empty_n = ap_const_logic_0)))) and (exitcond_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifft_out_read <= ap_const_logic_1;
        else 
            ifft_out_read <= ap_const_logic_0;
        end if; 
    end process;


    ifft_status_data_V_blk_n_assign_proc : process(ifft_status_data_V_empty_n, ap_CS_fsm_state2, exitcond_fu_115_p2)
    begin
        if (((exitcond_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifft_status_data_V_blk_n <= ifft_status_data_V_empty_n;
        else 
            ifft_status_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ifft_status_data_V_read_assign_proc : process(ifft_out_empty_n, ifft_status_data_V_empty_n, ap_CS_fsm_state2, exitcond_fu_115_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((exitcond_fu_115_p2 = ap_const_lv1_1) and (ifft_status_data_V_empty_n = ap_const_logic_0)) or ((exitcond_fu_115_p2 = ap_const_lv1_0) and (ifft_out_empty_n = ap_const_logic_0)))) and (exitcond_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifft_status_data_V_read <= ap_const_logic_1;
        else 
            ifft_status_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    out_data_1_ack_in <= out_data_1_state(1);
    out_data_1_ack_out <= out_r_TREADY;

    out_data_1_data_out_assign_proc : process(out_data_1_payload_A, out_data_1_payload_B, out_data_1_sel)
    begin
        if ((out_data_1_sel = ap_const_logic_1)) then 
            out_data_1_data_out <= out_data_1_payload_B;
        else 
            out_data_1_data_out <= out_data_1_payload_A;
        end if; 
    end process;

    out_data_1_load_A <= (out_data_1_state_cmp_full and not(out_data_1_sel_wr));
    out_data_1_load_B <= (out_data_1_state_cmp_full and out_data_1_sel_wr);
    out_data_1_sel <= out_data_1_sel_rd;
    out_data_1_state_cmp_full <= '0' when (out_data_1_state = ap_const_lv2_1) else '1';

    out_data_1_vld_in_assign_proc : process(ifft_out_empty_n, ifft_status_data_V_empty_n, ap_CS_fsm_state2, exitcond_fu_115_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((exitcond_fu_115_p2 = ap_const_lv1_1) and (ifft_status_data_V_empty_n = ap_const_logic_0)) or ((exitcond_fu_115_p2 = ap_const_lv1_0) and (ifft_out_empty_n = ap_const_logic_0)))) and (exitcond_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_data_1_vld_in <= ap_const_logic_1;
        else 
            out_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_data_1_vld_out <= out_data_1_state(0);
    out_last_V_1_ack_in <= out_last_V_1_state(1);
    out_last_V_1_ack_out <= out_r_TREADY;

    out_last_V_1_data_out_assign_proc : process(out_last_V_1_payload_A, out_last_V_1_payload_B, out_last_V_1_sel)
    begin
        if ((out_last_V_1_sel = ap_const_logic_1)) then 
            out_last_V_1_data_out <= out_last_V_1_payload_B;
        else 
            out_last_V_1_data_out <= out_last_V_1_payload_A;
        end if; 
    end process;

    out_last_V_1_load_A <= (out_last_V_1_state_cmp_full and not(out_last_V_1_sel_wr));
    out_last_V_1_load_B <= (out_last_V_1_state_cmp_full and out_last_V_1_sel_wr);
    out_last_V_1_sel <= out_last_V_1_sel_rd;
    out_last_V_1_state_cmp_full <= '0' when (out_last_V_1_state = ap_const_lv2_1) else '1';

    out_last_V_1_vld_in_assign_proc : process(ifft_out_empty_n, ifft_status_data_V_empty_n, ap_CS_fsm_state2, exitcond_fu_115_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((exitcond_fu_115_p2 = ap_const_lv1_1) and (ifft_status_data_V_empty_n = ap_const_logic_0)) or ((exitcond_fu_115_p2 = ap_const_lv1_0) and (ifft_out_empty_n = ap_const_logic_0)))) and (exitcond_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_last_V_1_vld_in <= ap_const_logic_1;
        else 
            out_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_last_V_1_vld_out <= out_last_V_1_state(0);
    out_r_TDATA <= out_data_1_data_out;

    out_r_TDATA_blk_n_assign_proc : process(out_data_1_state, ap_CS_fsm_state2, exitcond_fu_115_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((exitcond_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_r_TDATA_blk_n <= out_data_1_state(1);
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TLAST <= out_last_V_1_data_out;
    out_r_TVALID <= out_last_V_1_state(0);
    ovflow_1_ack_in <= ovflow_1_state(1);
    ovflow_1_ack_out <= ovflow_TREADY;

    ovflow_1_data_out_assign_proc : process(ovflow_1_payload_A, ovflow_1_payload_B, ovflow_1_sel)
    begin
        if ((ovflow_1_sel = ap_const_logic_1)) then 
            ovflow_1_data_out <= ovflow_1_payload_B;
        else 
            ovflow_1_data_out <= ovflow_1_payload_A;
        end if; 
    end process;

    ovflow_1_load_A <= (ovflow_1_state_cmp_full and not(ovflow_1_sel_wr));
    ovflow_1_load_B <= (ovflow_1_state_cmp_full and ovflow_1_sel_wr);
    ovflow_1_sel <= ovflow_1_sel_rd;
    ovflow_1_state_cmp_full <= '0' when (ovflow_1_state = ap_const_lv2_1) else '1';

    ovflow_1_vld_in_assign_proc : process(ifft_out_empty_n, ifft_status_data_V_empty_n, ap_CS_fsm_state2, exitcond_fu_115_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((exitcond_fu_115_p2 = ap_const_lv1_1) and (ifft_status_data_V_empty_n = ap_const_logic_0)) or ((exitcond_fu_115_p2 = ap_const_lv1_0) and (ifft_out_empty_n = ap_const_logic_0)))) and (exitcond_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ovflow_1_vld_in <= ap_const_logic_1;
        else 
            ovflow_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ovflow_1_vld_out <= ovflow_1_state(0);
    ovflow_TDATA <= ovflow_1_data_out;

    ovflow_TDATA_blk_n_assign_proc : process(ovflow_1_state, ap_CS_fsm_state2, exitcond_fu_115_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((exitcond_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ovflow_TDATA_blk_n <= ovflow_1_state(1);
        else 
            ovflow_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ovflow_TVALID <= ovflow_1_state(0);
    tmp_22_fu_134_p1 <= ifft_status_data_V_dout(1 - 1 downto 0);
    tmp_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_134_p1),8));
    tmp_s_fu_127_p2 <= "1" when (i_reg_104 = ap_const_lv6_1F) else "0";
end behav;
